#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR)(c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin, yyscanner)
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state* YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                     \
  do {                                                                \
    /* Undo effects of setting up yytext. */                          \
    int yyless_macro_arg = (n);                                       \
    YY_LESS_LINENO(yyless_macro_arg);                                 \
    *yy_cp = yyg->yy_hold_char;                                       \
    YY_RESTORE_YY_MORE_OFFSET                                         \
    yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                    \
  } while (0)
#define unput(c) yyunput(c, yyg->yytext_ptr, yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
  FILE* yy_input_file;

  char* yy_ch_buf;  /* input buffer */
  char* yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
  int yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER (yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart(FILE* input_file, yyscan_t yyscanner);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size, yyscan_t yyscanner);
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
void yypop_buffer_state(yyscan_t yyscanner);

static void yyensure_buffer_stack(yyscan_t yyscanner);
static void yy_load_buffer_state(yyscan_t yyscanner);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file, yyscan_t yyscanner);
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER, yyscanner)

YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_string(const char* yy_str, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_bytes(const char* bytes, int len, yyscan_t yyscanner);

void* yyalloc(yy_size_t, yyscan_t yyscanner);
void* yyrealloc(void*, yy_size_t, yyscan_t yyscanner);
void yyfree(void*, yyscan_t yyscanner);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive)                                       \
  {                                                                              \
    if (!YY_CURRENT_BUFFER) {                                                    \
      yyensure_buffer_stack(yyscanner);                                          \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
    }                                                                            \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;                \
  }
#define yy_set_bol(at_bol)                                                       \
  {                                                                              \
    if (!YY_CURRENT_BUFFER) {                                                    \
      yyensure_buffer_stack(yyscanner);                                          \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
    }                                                                            \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                                \
  }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/ 1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state(yyscan_t yyscanner);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state, yyscan_t yyscanner);
static int yy_get_next_buffer(yyscan_t yyscanner);
static void yynoreturn yy_fatal_error(const char* msg, yyscan_t yyscanner);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION      \
  yyg->yytext_ptr = yy_bp;       \
  yyleng = (int)(yy_cp - yy_bp); \
  yyg->yy_hold_char = *yy_cp;    \
  *yy_cp = '\0';                 \
  yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 170
#define YY_END_OF_BUFFER 171
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[1192] = {
    0,   0,   0,   167, 167, 2,   2,   171, 169, 4,   4,   169, 169, 158, 165, 158, 158, 162, 158, 158, 158, 164, 164,
    164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 158,
    167, 168, 2,   2,   3,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   4,   153, 0,   1,   0,   160,
    159, 162, 155, 154, 152, 156, 164, 164, 164,

    164, 164, 164, 123, 164, 124, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
    164, 164, 164, 164, 164, 164, 164, 125, 164, 164, 126, 127, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
    164, 128, 129, 130, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 131, 164,
    164, 164, 164, 164, 164, 164, 164, 164, 157, 167, 166, 2,   2,   2,   2,   1,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,

    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   163, 0,   159, 111, 164, 112, 164, 164, 113, 164, 114, 164, 164, 164, 164, 164, 164, 164,
    164, 164, 164, 164, 164, 164, 135, 164,

    164, 164, 164, 164, 164, 164, 164, 164, 164, 115, 164, 164, 164, 164, 164, 164, 164, 164, 164, 116, 164, 164, 164,
    164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 117, 164, 164, 118, 164, 164, 164, 164, 164, 164, 164, 164, 164,
    164, 119, 164, 164, 120, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 121, 164, 164, 164,
    164, 164, 164, 164, 164, 164, 122, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,

    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,

    2,   2,   2,   2,   0,   164, 164, 164, 164, 164, 164, 164, 82,  164, 83,  45,  84,  164, 164, 164, 85,  164, 164,
    86,  141, 164, 164, 164, 164, 164, 88,  164, 164, 164, 89,  90,  164, 164, 164, 164, 164, 164, 164, 91,  164, 164,
    92,  93,  164, 164, 94,  164, 95,  134, 164, 164, 164, 164, 164, 164, 96,  164, 97,  98,  99,  164, 101, 164, 102,
    164, 164, 164, 164, 103, 164, 164, 164, 164, 164, 104, 164, 164, 32,  164, 164, 164, 164, 164, 164, 164, 105, 164,
    164, 164, 164, 164, 106, 107, 30,  164,

    144, 164, 164, 164, 164, 164, 164, 164, 164, 108, 164, 109, 164, 110, 137, 2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,

    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   0,   62,  63,  164, 64,  164, 147, 164, 164, 164, 164, 164, 164, 164, 65,  164, 164, 164, 164, 164,
    66,  164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 145, 67,  164, 164, 68,  164, 140, 100, 164, 69,  70,  164,
    164, 164, 164, 71,  72,  73,  74,  164, 136, 164, 164, 164, 75,  76,  164, 164, 164, 164, 164, 77,  164, 164, 164,
    164, 164, 164, 164, 78,  164, 164, 164,

    164, 79,  164, 164, 164, 80,  164, 164, 164, 81,  143, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   0,   164, 35,  164,

    164, 164, 36,  149, 164, 37,  164, 164, 164, 164, 38,  164, 39,  164, 40,  41,  42,  164, 43,  164, 164, 46,  47,
    48,  49,  50,  164, 164, 164, 51,  133, 142, 164, 164, 52,  164, 164, 164, 53,  164, 164, 54,  132, 55,  164, 56,
    164, 57,  164, 164, 164, 164, 58,  59,  60,  61,  164, 164, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,

    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   0,   15,  16,
    17,  164, 18,  19,  164, 164, 31,  20,  164, 164, 21,  22,  44,  23,  164, 164, 139, 24,  164, 164, 25,  26,  164,
    164, 27,  138, 164, 28,  164, 164, 164, 164, 29,  34,  2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   0,   164, 87,  164, 10,  11,

    164, 150, 12,  164, 13,  148, 33,  164, 164, 164, 14,  2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   0,   164, 164, 7,   164, 8,   9,   164, 2,   2,   2,   2,   2,   2,   2,   2,   0,   0,
    5,   6,   164, 2,   2,   2,   2,   2,   0,   0,   146, 2,   2,   2,   0,   0,   2,   2,   0,   0,   2,   2,   0,
    0,   2,   2,   0,   0,   2,   2,   0,   0,   2,   2,   0,   151, 2,   2,   0,   2,   0,   2,   161, 2,   0

};

static const YY_CHAR yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  2,  4,  5,  1,  1,  6,  1,  7,  6,  6,  6,  6,  6,  8,  9,  6,  10, 11, 12, 13, 14, 15, 16, 17,
    18, 19, 6,  6,  20, 21, 22, 6,  1,  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 6,  1,  6,  6,  49, 1,  50, 51, 52, 53,

    54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 6,  76, 6,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,

    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1};

static const YY_CHAR yy_meta[77] = {0, 1, 1, 2, 1, 3, 1, 4, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 5, 5, 5,
                                    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1};

static const flex_int16_t yy_base[1199] = {
    0,    0,    0,    581,  574,  76,   0,    573,  4737, 151,  153,  547,  0,    4737, 4737, 149,  148,
    160,  159,  535,  532,  156,  156,  164,  162,  172,  223,  198,  211,  215,  151,  168,  210,  255,
    257,  263,  262,  0,    277,  317,  360,  296,  221,  258,  171,  476,  0,    530,  0,    295,  308,
    515,  516,  0,    0,    317,  418,  429,  317,  499,  496,  448,  524,  578,  630,  678,  730,  338,
    436,  778,  330,  319,  349,  444,  830,  878,  500,  321,  511,  928,  980,  556,  512,  533,  431,
    437,  347,  4737, 507,  4737, 485,  1045, 1055, 1066, 4737, 4737, 4737, 4737, 0,    174,  253,

    438,  469,  284,  318,  567,  0,    538,  339,  578,  361,  591,  621,  607,  417,  429,  436,  453,
    489,  641,  515,  521,  520,  537,  556,  568,  590,  594,  659,  601,  608,  0,    628,  625,  675,
    633,  650,  644,  674,  674,  697,  673,  679,  685,  681,  689,  701,  722,  726,  0,    729,  714,
    719,  740,  738,  766,  737,  734,  741,  776,  739,  776,  768,  786,  787,  785,  788,  782,  783,
    800,  793,  796,  824,  822,  832,  833,  819,  840,  4737, 0,    4737, 0,    399,  0,    491,  0,
    453,  1076, 1086, 1097, 0,    0,    0,    0,    838,  849,  866,  882,  923,  890,  934,

    967,  868,  971,  1094, 1142, 952,  977,  1194, 1091, 1092, 1093, 1096, 1107, 1146, 1244, 1152, 1184,
    1196, 1185, 1200, 1229, 1230, 1252, 1270, 1265, 1278, 880,  1296, 1136, 1345, 1293, 1304, 1128, 1306,
    1322, 1341, 1226, 1347, 1370, 1268, 1358, 1375, 1384, 1398, 1234, 1413, 1401, 1410, 1424, 1415, 1456,
    1434, 1466, 1455, 1489, 1464, 1498, 1495, 1510, 1520, 1519, 1528, 1541, 1532, 1562, 1573, 1564, 1583,
    1595, 1586, 1574, 1597, 1596, 0,    4737, 452,  1662, 0,    837,  0,    844,  877,  0,    924,  0,
    923,  970,  968,  981,  1640, 1082, 1081, 1090, 1084, 1082, 1164, 1147, 1170, 1168, 1217,

    1305, 1323, 1641, 1364, 1376, 1399, 1435, 1442, 1472, 0,    1482, 1507, 1526, 1512, 1522, 1558, 1617,
    1632, 1638, 1628, 1629, 1650, 1663, 1646, 1663, 1665, 1655, 1658, 1666, 1663, 1674, 1675, 1676, 1678,
    1661, 1670, 0,    1665, 1681, 1681, 1687, 1694, 1689, 1690, 1678, 1680, 1693, 0,    1703, 1698, 1700,
    1716, 1720, 1727, 1715, 1714, 1718, 1720, 1732, 1714, 1727, 1724, 1732, 1723, 1734, 0,    1717, 1732,
    1725, 1727, 1737, 1734, 1731, 1739, 1749, 0,    1754, 1765, 1758, 1754, 1781, 1769, 1763, 1782, 1763,
    1767, 1774, 1781, 1772, 0,    450,  1832, 1813, 1825, 1826, 1827, 1828, 1829, 1838, 1830,

    1859, 1863, 1864, 1880, 1897, 1888, 1903, 1905, 1851, 1916, 1933, 1931, 1921, 1947, 1942, 1955, 1970,
    1964, 1983, 1965, 1998, 1999, 2004, 1987, 2000, 2009, 2001, 2035, 2038, 2037, 2041, 2039, 2043, 2073,
    2067, 2083, 2092, 2077, 2089, 2095, 2107, 2108, 2131, 2137, 2146, 2113, 2121, 2145, 2149, 2147, 2179,
    2162, 2180, 2177, 2181, 2203, 2191, 2217, 2231, 2205, 2220, 2239, 2216, 2234, 2256, 2257, 2245, 2253,
    2274, 2279, 2291, 2285, 2307, 2313, 2308, 2319, 2310, 2325, 2343, 2331, 2342, 2347, 2361, 2356, 2364,
    2393, 2385, 2382, 2401, 2387, 2399, 2416, 2422, 2435, 2441, 2457, 2456, 2444, 2475, 2479,

    2439, 2485, 2490, 2496, 448,  1828, 1830, 1879, 1975, 2036, 2280, 2348, 0,    2363, 0,    0,    2381,
    2493, 2503, 2495, 0,    2496, 2499, 2499, 0,    2508, 2510, 2503, 2512, 2533, 2517, 2533, 2529, 2532,
    0,    0,    2533, 2536, 2532, 2534, 2554, 2555, 2552, 0,    2538, 2559, 0,    0,    2563, 2550, 0,
    2553, 0,    2549, 2564, 2552, 2548, 2555, 2556, 2568, 0,    2565, 0,    0,    0,    2558, 0,    2576,
    0,    2584, 2587, 2582, 2574, 0,    2595, 2598, 2590, 2591, 2597, 0,    2610, 2611, 0,    2601, 2600,
    2600, 2619, 2609, 2609, 2621, 0,    2614, 2622, 2619, 2624, 2616, 0,    0,    2613, 2621,

    0,    2639, 2629, 2623, 2645, 2632, 2650, 2655, 2653, 0,    2641, 0,    2658, 0,    2645, 438,  2660,
    2675, 2669, 2670, 2678, 2672, 2693, 2694, 2710, 2704, 2709, 2727, 2726, 2728, 2745, 2742, 2763, 2766,
    2764, 2767, 2781, 2796, 2782, 2797, 2799, 2820, 2832, 2834, 2835, 2821, 2836, 2853, 2866, 2858, 2872,
    2875, 2888, 2870, 2876, 2906, 2916, 2907, 2910, 2924, 2918, 2932, 2940, 2941, 2950, 2942, 2972, 2955,
    2973, 2983, 3004, 2978, 3007, 2995, 3008, 3009, 3032, 3018, 3043, 3026, 3037, 3061, 3066, 3058, 3040,
    3091, 3072, 3094, 3097, 3112, 3095, 3129, 3130, 3128, 3143, 3145, 3146, 3167, 3154, 3186,

    3182, 3183, 3197, 3196, 3208, 3198, 3226, 3200, 3221, 3237, 3238, 3234, 3242, 3250, 3256, 3275, 3290,
    3280, 3274, 3288, 3292, 3304, 3296, 3306, 3314, 3328, 413,  0,    0,    2655, 0,    2711, 0,    2712,
    2744, 2746, 2740, 2785, 2808, 2931, 0,    2980, 2984, 3086, 3093, 3104, 0,    3102, 3169, 3196, 3260,
    3266, 3296, 3298, 3311, 3325, 3332, 0,    0,    3321, 3337, 0,    3343, 0,    0,    3331, 0,    0,
    3334, 3350, 3345, 3347, 0,    0,    0,    0,    3358, 3346, 3368, 3362, 3351, 0,    0,    3367, 3355,
    3357, 3374, 3374, 0,    3383, 3384, 3383, 3368, 3380, 3389, 3394, 3382, 3385, 3384, 3404,

    3406, 0,    3403, 3405, 3408, 0,    3398, 3417, 3418, 0,    0,    409,  3416, 3418, 3428, 3424, 3432,
    3433, 3434, 3447, 3458, 3457, 3472, 3486, 3442, 3468, 3497, 3498, 3507, 3502, 3511, 3512, 3537, 3540,
    3542, 3526, 3543, 3556, 3565, 3552, 3577, 3596, 3575, 3586, 3600, 3610, 3591, 3626, 3605, 3609, 3634,
    3631, 3639, 3645, 3648, 3650, 3662, 3663, 3679, 3680, 3684, 3685, 3688, 3717, 3698, 3719, 3703, 3716,
    3721, 3738, 3742, 3733, 3752, 3747, 3775, 3777, 3787, 3776, 3788, 3806, 3816, 3811, 3817, 3827, 3845,
    3850, 3801, 3829, 3860, 3851, 3855, 3879, 3885, 3894, 3883, 3884, 404,  3437, 0,    3511,

    3521, 3546, 3560, 0,    3607, 0,    3685, 3724, 3747, 3742, 0,    3796, 0,    3842, 0,    0,    0,
    3861, 0,    3853, 3876, 0,    0,    0,    0,    0,    3882, 3896, 3904, 0,    3887, 0,    3902, 3917,
    0,    3900, 3916, 3899, 0,    3926, 3927, 3915, 3919, 0,    3925, 0,    3928, 0,    3941, 3942, 3941,
    3929, 0,    0,    0,    0,    3932, 3940, 403,  3948, 3949, 3950, 3953, 3963, 3967, 3979, 3982, 3984,
    3993, 4017, 4012, 4003, 4007, 4036, 4021, 4049, 4035, 4038, 4051, 4052, 4053, 4057, 4075, 4061, 4067,
    4086, 4089, 4091, 4092, 4101, 4107, 4115, 4123, 4120, 4124, 4129, 4126, 4145, 4141, 4155,

    4157, 4180, 4181, 4169, 4195, 4166, 4194, 4191, 4212, 4197, 4229, 4235, 4245, 4233, 4220, 4234, 4237,
    4251, 4266, 4283, 407,  0,    0,    0,    3958, 0,    0,    3998, 4047, 0,    0,    4163, 4184, 0,
    0,    0,    0,    4225, 4261, 0,    0,    4256, 4273, 0,    0,    4259, 4271, 0,    0,    4270, 0,
    4274, 4280, 4274, 4291, 0,    0,    404,  4299, 4302, 4305, 4307, 4308, 4311, 4320, 4337, 4321, 4323,
    4324, 4359, 4336, 4342, 4345, 4353, 4377, 4378, 4361, 4376, 4394, 4390, 4391, 4393, 4415, 4416, 4399,
    4427, 4433, 4431, 4432, 4456, 4450, 4461, 4466, 4467, 401,  4326, 0,    4367, 0,    0,

    4413, 0,    0,    4431, 0,    0,    0,    4448, 4458, 4469, 0,    399,  4485, 4482, 4484, 4490, 4501,
    4507, 4515, 4516, 4520, 4518, 4519, 4524, 4530, 4541, 4555, 4553, 395,  404,  4556, 0,    4544, 0,
    0,    4554, 350,  4594, 4570, 4572, 4581, 4576, 4578, 4606, 344,  4612, 0,    0,    4575, 342,  4614,
    4593, 4607, 4615, 338,  4613, 0,    335,  4614, 4612, 330,  4605, 325,  4617, 306,  4618, 303,  4624,
    288,  4642, 255,  4643, 250,  4639, 245,  4640, 243,  4648, 240,  4650, 235,  4737, 221,  0,    226,
    197,  187,  173,  4737, 0,    4737, 4706, 4711, 181,  4716, 4721, 4726, 4731

};

static const flex_int16_t yy_def[1199] = {
    0,    1191, 1,    1192, 1192, 1191, 5,    1191, 1191, 1191, 1191, 1191, 1193, 1191, 1191, 1191, 1191,
    1191, 1191, 1191, 1191, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1191, 1195, 1191, 1196, 1196, 1191,
    1196, 1197, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1198, 1198, 62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    1196, 1191, 1191, 1193, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1194, 1194, 1194,

    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1191, 1195, 1191, 1196, 1196, 1196, 1197, 1196,
    1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 62,   62,   62,   62,   62,   62,   62,

    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   1196, 1191, 1191, 1191, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1196, 1196, 1196, 62,   62,   62,   62,   62,   62,   62,   62,

    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

    62,   62,   62,   62,   1191, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1196, 62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   1191, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,

    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1196, 62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   1191, 1194, 1194, 1194,

    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1196, 62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   1191, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1194, 1194, 1194, 1194, 1196, 62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   1191, 1194, 1194, 1194, 1194, 1194,

    1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1196, 62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,   1191, 1194, 1194, 1194, 1194, 1194,
    1194, 1194, 1196, 62,   62,   62,   62,   62,   62,   62,   1191, 1191, 1194, 1194, 1194, 1196, 1196,
    62,   62,   62,   1191, 1191, 1194, 1196, 1196, 62,   1191, 1191, 1196, 1196, 1191, 1191, 1196, 1196,
    1191, 1191, 1196, 1196, 1191, 1191, 1196, 1196, 1191, 1191, 1196, 1196, 1191, 1191, 1196, 1196, 1191,
    1196, 1191, 1196, 1191, 1196, 0,    1191, 1191, 1191, 1191, 1191, 1191, 1191

};

static const flex_int16_t yy_nxt[4814] = {
    0,    8,    9,    10,   11,   12,   13,   14,   15,   16,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   18,   19,   20,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,   42,   43,   37,   44,   37,   8,    21,
    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
    39,   40,   41,   42,   43,   37,   44,   37,   45,   48,   49,   50,   51,   52,   53,   54,   55,
    56,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

    63,   64,   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
    80,   81,   82,   83,   77,   84,   77,   48,   61,   62,   63,   64,   65,   66,   67,   68,   69,
    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   82,   83,   77,   84,   77,
    85,   86,   86,   86,   86,   89,   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,   90,
    92,   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,   94,   95,   99,   105,  100,  111,
    98,   107,  136,  112,  101,  1190, 102,  113,  108,  137,  103,  104,  177,  114,  278,

    109,  115,  106,  110,  1189, 116,  1188, 117,  99,   105,  100,  111,  118,  107,  136,  112,  101,
    119,  102,  113,  108,  137,  103,  104,  177,  114,  278,  109,  115,  106,  110,  126,  116,  128,
    117,  1187, 138,  127,  1186, 118,  139,  129,  131,  173,  119,  120,  140,  130,  132,  133,  134,
    174,  1185, 121,  1183, 135,  122,  1181, 126,  123,  128,  1179, 124,  138,  127,  125,  1177, 139,
    129,  131,  173,  1175, 120,  140,  130,  132,  133,  134,  174,  144,  121,  141,  135,  122,  152,
    142,  123,  175,  176,  124,  148,  143,  125,  145,  279,  153,  182,  86,   149,  146,

    147,  154,  150,  155,  1173, 151,  144,  156,  141,  86,   86,   152,  142,  157,  175,  176,  1171,
    148,  143,  1169, 145,  279,  153,  284,  185,  149,  146,  147,  154,  150,  155,  170,  151,  171,
    156,  186,  172,  190,  191,  1167, 157,  158,  285,  159,  1165, 233,  160,  194,  86,   86,   284,
    161,  1163, 162,  163,  1161, 194,  1158, 170,  1155, 171,  291,  1150, 172,  194,  194,  232,  194,
    158,  285,  159,  222,  233,  160,  194,  234,  194,  223,  161,  235,  162,  163,  164,  194,  194,
    236,  165,  296,  291,  166,  167,  194,  194,  232,  194,  194,  168,  297,  222,  169,

    182,  86,   234,  194,  223,  1146, 235,  1145, 1137, 164,  1129, 194,  236,  165,  296,  1112, 166,
    167,  1095, 1058, 1021, 959,  194,  168,  297,  897,  169,  187,  187,  187,  187,  187,  187,  187,
    187,  187,  187,  188,  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,  181,  181,  812,
    181,  181,  181,  181,  181,  181,  273,  224,  307,  727,  616,  194,  505,  391,  308,  225,  181,
    181,  181,  237,  280,  226,  195,  238,  196,  309,  194,  310,  281,  239,  197,  194,  198,  273,
    224,  307,  199,  200,  194,  194,  282,  308,  225,  283,  390,  276,  237,  280,  226,

    195,  238,  196,  309,  194,  310,  281,  239,  197,  194,  198,  275,  274,  311,  199,  200,  193,
    194,  282,  192,  181,  283,  248,  181,  181,  181,  194,  181,  181,  181,  181,  181,  181,  249,
    269,  183,  180,  251,  194,  250,  311,  252,  270,  181,  181,  181,  194,  253,  317,  248,  201,
    178,  97,   194,  318,  96,   319,  194,  194,  194,  249,  269,  271,  272,  251,  194,  250,  87,
    252,  270,  202,  289,  1191, 194,  253,  317,  320,  201,  290,  194,  47,   318,  194,  319,  194,
    194,  194,  47,   1191, 271,  272,  266,  321,  267,  286,  287,  268,  202,  289,  181,

    203,  322,  194,  320,  194,  290,  194,  204,  288,  194,  1191, 292,  293,  294,  205,  295,  1191,
    206,  266,  321,  267,  286,  287,  268,  194,  1191, 323,  203,  322,  194,  324,  194,  298,  1191,
    204,  288,  327,  299,  292,  293,  294,  205,  295,  300,  206,  301,  305,  306,  302,  1191, 328,
    194,  207,  323,  303,  1191, 208,  324,  329,  298,  209,  304,  330,  327,  299,  312,  210,  313,
    335,  211,  300,  314,  301,  305,  306,  302,  194,  328,  315,  207,  336,  303,  316,  208,  1191,
    329,  1191, 209,  304,  330,  337,  1191, 312,  210,  313,  335,  211,  1191, 314,  325,

    331,  338,  326,  194,  194,  315,  339,  336,  340,  316,  332,  212,  344,  213,  345,  333,  334,
    337,  214,  341,  346,  342,  347,  215,  194,  1191, 325,  331,  338,  326,  348,  194,  343,  339,
    349,  340,  1191, 332,  212,  344,  213,  345,  333,  334,  350,  214,  341,  346,  342,  347,  215,
    194,  216,  351,  352,  353,  194,  348,  354,  343,  217,  349,  355,  218,  356,  361,  219,  362,
    357,  220,  363,  350,  221,  1191, 1191, 367,  194,  1191, 1191, 216,  351,  352,  353,  194,  1191,
    354,  1191, 217,  358,  355,  218,  356,  361,  219,  362,  357,  220,  363,  368,  221,

    364,  359,  367,  194,  194,  227,  360,  369,  370,  365,  371,  228,  229,  230,  374,  358,  375,
    366,  231,  372,  376,  381,  377,  379,  194,  368,  380,  364,  359,  1191, 373,  194,  227,  360,
    369,  370,  365,  371,  228,  229,  230,  374,  378,  375,  366,  231,  372,  376,  381,  377,  379,
    194,  240,  380,  382,  383,  194,  373,  385,  387,  388,  384,  389,  506,  194,  1191, 241,  1191,
    1191, 378,  507,  386,  242,  243,  393,  194,  194,  1191, 1191, 240,  1191, 382,  383,  194,  194,
    385,  387,  388,  384,  389,  506,  194,  194,  241,  194,  194,  1191, 507,  386,  242,

    243,  393,  194,  194,  194,  244,  194,  394,  194,  1191, 508,  194,  194,  245,  194,  395,  194,
    246,  1191, 194,  247,  194,  194,  396,  194,  1191, 194,  1191, 194,  399,  1191, 194,  244,  194,
    394,  194,  194,  508,  1191, 194,  245,  194,  395,  194,  246,  397,  509,  247,  398,  194,  396,
    194,  254,  194,  255,  194,  399,  256,  400,  510,  194,  1191, 257,  194,  258,  259,  1191, 1191,
    1191, 194,  1191, 1191, 397,  509,  194,  398,  194,  1191, 411,  254,  194,  255,  1191, 1191, 256,
    400,  510,  194,  412,  257,  1191, 258,  259,  194,  401,  402,  194,  194,  194,  1191,

    511,  194,  260,  194,  404,  411,  261,  194,  403,  262,  263,  405,  512,  194,  513,  412,  264,
    194,  413,  265,  194,  401,  402,  414,  194,  194,  194,  511,  1191, 260,  194,  404,  1191, 261,
    1191, 403,  262,  263,  405,  512,  194,  513,  1191, 264,  194,  413,  265,  1191, 1191, 1191, 414,
    1191, 1191, 194,  91,   91,   91,   91,   91,   91,   91,   91,   91,   91,   277,  277,  277,  277,
    277,  277,  277,  277,  277,  277,  92,   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
    187,  187,  187,  187,  187,  187,  187,  187,  187,  187,  392,  392,  392,  392,  392,

    392,  392,  392,  392,  392,  188,  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,  406,
    194,  194,  194,  194,  517,  194,  518,  519,  520,  1191, 1191, 521,  423,  420,  421,  425,  194,
    422,  1191, 424,  194,  194,  194,  194,  1191, 194,  406,  194,  194,  194,  194,  517,  194,  518,
    519,  520,  194,  194,  521,  423,  420,  421,  425,  194,  422,  194,  424,  194,  194,  194,  194,
    194,  194,  426,  1191, 194,  445,  452,  407,  408,  409,  194,  410,  194,  194,  194,  1191, 1191,
    432,  522,  523,  194,  194,  1191, 1191, 194,  1191, 1191, 194,  524,  426,  194,  194,

    445,  452,  407,  408,  409,  194,  410,  1191, 525,  194,  194,  194,  432,  522,  523,  194,  415,
    433,  416,  194,  194,  417,  194,  524,  435,  194,  194,  418,  1191, 1191, 194,  194,  434,  1191,
    419,  525,  436,  194,  194,  1191, 194,  1191, 194,  415,  433,  416,  194,  194,  417,  194,  526,
    435,  194,  194,  418,  194,  194,  194,  194,  434,  194,  419,  437,  436,  1191, 459,  438,  194,
    427,  194,  428,  1191, 194,  194,  429,  194,  194,  526,  194,  194,  194,  430,  194,  194,  1191,
    431,  1191, 194,  439,  437,  194,  194,  459,  438,  194,  427,  194,  428,  194,  194,

    442,  429,  194,  194,  194,  194,  1191, 194,  430,  462,  440,  194,  431,  441,  194,  439,  194,
    194,  194,  194,  443,  194,  194,  194,  194,  194,  444,  442,  450,  1191, 194,  194,  194,  453,
    451,  527,  462,  440,  194,  194,  441,  194,  194,  194,  1191, 528,  194,  443,  194,  194,  194,
    194,  194,  444,  454,  450,  455,  194,  1191, 194,  453,  451,  527,  456,  1191, 457,  194,  194,
    194,  194,  446,  194,  528,  194,  1191, 194,  458,  194,  1191, 194,  447,  454,  460,  455,  194,
    448,  449,  194,  531,  1191, 456,  194,  457,  194,  194,  194,  194,  446,  194,  463,

    194,  194,  532,  458,  194,  461,  465,  447,  464,  460,  194,  194,  448,  449,  194,  531,  194,
    1191, 194,  1191, 194,  194,  1191, 194,  194,  466,  463,  194,  194,  532,  194,  194,  461,  465,
    1191, 464,  194,  194,  467,  194,  533,  471,  468,  194,  194,  472,  470,  194,  194,  469,  194,
    194,  466,  1191, 194,  1191, 194,  194,  534,  194,  194,  194,  476,  194,  1191, 467,  194,  533,
    471,  468,  194,  194,  472,  470,  194,  1191, 469,  194,  473,  535,  194,  194,  194,  194,  478,
    534,  194,  194,  194,  476,  194,  474,  194,  1191, 1191, 1191, 475,  194,  536,  477,

    482,  194,  194,  1191, 537,  473,  535,  194,  194,  194,  194,  478,  194,  479,  1191, 194,  1191,
    194,  474,  194,  483,  194,  480,  475,  194,  536,  477,  482,  194,  194,  481,  537,  485,  538,
    484,  194,  194,  194,  1191, 194,  479,  194,  194,  486,  194,  194,  194,  483,  194,  480,  539,
    194,  540,  487,  489,  541,  194,  481,  194,  485,  538,  484,  194,  194,  488,  194,  194,  194,
    194,  491,  486,  194,  194,  194,  194,  490,  1191, 539,  194,  540,  487,  489,  541,  194,  492,
    194,  1191, 194,  194,  496,  194,  488,  194,  194,  194,  1191, 491,  542,  1191, 194,

    502,  194,  490,  494,  493,  194,  495,  1191, 194,  194,  194,  492,  500,  497,  194,  194,  496,
    194,  504,  194,  194,  194,  194,  194,  542,  501,  194,  502,  498,  194,  494,  493,  194,  495,
    499,  194,  194,  194,  503,  500,  497,  194,  194,  194,  1191, 504,  194,  194,  194,  194,  194,
    1191, 501,  1191, 1191, 498,  194,  543,  544,  194,  545,  499,  546,  547,  514,  503,  515,  529,
    194,  194,  194,  277,  277,  277,  277,  277,  277,  277,  277,  277,  277,  516,  530,  548,  543,
    544,  549,  545,  550,  546,  547,  514,  551,  515,  529,  552,  553,  554,  555,  556,

    557,  558,  559,  562,  560,  563,  564,  565,  516,  530,  548,  566,  567,  549,  561,  550,  568,
    569,  570,  551,  571,  572,  552,  553,  554,  555,  556,  557,  558,  559,  562,  560,  563,  564,
    565,  573,  574,  575,  566,  567,  576,  561,  577,  568,  569,  570,  578,  571,  572,  579,  580,
    581,  582,  583,  584,  585,  586,  587,  588,  589,  590,  591,  573,  574,  575,  592,  593,  576,
    594,  577,  595,  596,  597,  578,  598,  599,  579,  580,  581,  582,  583,  584,  585,  586,  587,
    588,  589,  590,  591,  600,  605,  601,  592,  593,  603,  594,  604,  595,  596,  597,

    602,  598,  599,  606,  607,  608,  609,  610,  611,  612,  614,  615,  1191, 613,  1191, 1191, 600,
    605,  601,  1191, 1191, 603,  1191, 604,  1191, 1191, 1191, 602,  1191, 1191, 606,  607,  608,  609,
    610,  611,  612,  614,  615,  194,  613,  392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
    617,  194,  618,  194,  194,  194,  1191, 1191, 194,  620,  619,  1191, 1191, 194,  1191, 194,  728,
    1191, 729,  1191, 194,  194,  194,  194,  194,  194,  194,  617,  194,  618,  194,  194,  194,  194,
    194,  194,  620,  619,  194,  194,  194,  631,  622,  728,  621,  729,  194,  194,  194,

    194,  194,  194,  194,  194,  194,  194,  1191, 623,  194,  194,  194,  194,  624,  194,  1191, 194,
    194,  1191, 631,  622,  625,  621,  626,  194,  730,  194,  628,  1191, 194,  1191, 194,  194,  194,
    194,  623,  194,  194,  627,  630,  624,  194,  194,  194,  1191, 629,  1191, 635,  625,  194,  626,
    194,  730,  194,  628,  633,  194,  194,  194,  194,  1191, 194,  632,  1191, 1191, 627,  630,  194,
    194,  194,  194,  634,  629,  194,  635,  637,  194,  194,  194,  194,  1191, 194,  633,  1191, 194,
    638,  194,  636,  194,  632,  640,  643,  639,  194,  194,  194,  194,  1191, 634,  1191,

    194,  194,  637,  1191, 194,  641,  194,  642,  194,  194,  194,  194,  638,  647,  636,  194,  194,
    640,  643,  639,  194,  731,  645,  194,  194,  194,  194,  649,  194,  194,  194,  648,  641,  194,
    642,  194,  194,  194,  194,  644,  647,  646,  1191, 194,  194,  194,  194,  194,  731,  645,  194,
    194,  194,  194,  649,  194,  194,  194,  648,  650,  194,  194,  194,  194,  194,  194,  644,  194,
    646,  655,  652,  194,  194,  194,  194,  732,  1191, 194,  651,  654,  653,  194,  194,  194,  194,
    194,  650,  194,  194,  194,  194,  194,  194,  194,  194,  656,  655,  652,  1191, 194,

    660,  657,  732,  194,  1191, 651,  654,  653,  194,  194,  194,  194,  194,  194,  194,  194,  194,
    658,  194,  194,  194,  194,  656,  194,  662,  659,  194,  660,  657,  194,  194,  661,  1191, 194,
    194,  194,  194,  663,  194,  668,  194,  194,  194,  1191, 658,  194,  194,  669,  194,  664,  194,
    662,  659,  194,  194,  1191, 194,  194,  661,  194,  194,  194,  194,  194,  663,  194,  668,  194,
    194,  666,  665,  670,  194,  194,  669,  671,  664,  194,  1191, 1191, 194,  194,  667,  194,  194,
    672,  194,  1191, 194,  673,  194,  194,  194,  194,  194,  194,  666,  665,  670,  194,

    194,  1191, 671,  676,  194,  194,  194,  194,  194,  667,  194,  677,  672,  679,  674,  194,  673,
    194,  194,  194,  194,  675,  194,  194,  1191, 194,  194,  194,  678,  194,  676,  194,  194,  194,
    194,  194,  1191, 194,  677,  1191, 679,  674,  194,  194,  194,  680,  194,  682,  675,  194,  194,
    194,  194,  194,  194,  678,  194,  194,  194,  681,  194,  683,  194,  194,  194,  194,  194,  685,
    1191, 194,  194,  688,  680,  194,  682,  1191, 194,  194,  194,  689,  194,  684,  194,  194,  194,
    194,  681,  194,  683,  194,  194,  194,  194,  194,  685,  686,  690,  687,  688,  194,

    194,  1191, 194,  194,  194,  194,  689,  194,  684,  194,  194,  194,  194,  1191, 691,  733,  1191,
    194,  194,  693,  194,  1191, 686,  690,  687,  194,  194,  194,  692,  194,  194,  194,  194,  194,
    194,  695,  194,  194,  194,  194,  694,  691,  733,  698,  194,  194,  693,  194,  697,  696,  1191,
    699,  194,  194,  194,  692,  194,  701,  194,  194,  194,  194,  695,  194,  194,  194,  194,  694,
    194,  194,  698,  194,  194,  194,  734,  697,  696,  194,  699,  700,  194,  194,  194,  194,  701,
    735,  194,  194,  194,  194,  194,  702,  194,  194,  703,  194,  194,  704,  194,  1191,

    194,  734,  194,  736,  194,  705,  700,  194,  194,  194,  194,  194,  735,  710,  194,  194,  194,
    194,  702,  194,  194,  703,  707,  708,  704,  194,  706,  194,  194,  194,  736,  194,  705,  194,
    194,  194,  709,  194,  194,  194,  710,  1191, 194,  1191, 1191, 194,  194,  194,  712,  707,  708,
    711,  194,  706,  194,  194,  1191, 713,  194,  1191, 194,  194,  194,  709,  1191, 194,  194,  194,
    194,  194,  194,  714,  194,  715,  194,  712,  1191, 716,  711,  717,  722,  194,  194,  194,  713,
    194,  719,  194,  194,  194,  194,  718,  194,  1191, 194,  194,  1191, 194,  714,  720,

    715,  194,  194,  194,  716,  194,  717,  722,  194,  194,  194,  194,  194,  719,  194,  1191, 194,
    194,  718,  725,  723,  194,  194,  721,  724,  194,  720,  737,  194,  194,  194,  194,  194,  738,
    739,  726,  194,  740,  194,  741,  742,  743,  194,  194,  744,  745,  725,  723,  194,  194,  721,
    724,  194,  746,  737,  747,  748,  749,  194,  750,  738,  739,  726,  194,  740,  751,  741,  742,
    743,  194,  752,  744,  745,  753,  754,  755,  756,  757,  758,  759,  746,  760,  747,  748,  749,
    761,  750,  762,  763,  764,  765,  766,  751,  767,  768,  769,  770,  752,  772,  773,

    753,  754,  755,  756,  757,  758,  759,  771,  760,  774,  775,  778,  761,  779,  762,  763,  764,
    765,  766,  780,  767,  768,  769,  770,  781,  772,  773,  776,  777,  782,  783,  784,  785,  786,
    771,  787,  774,  775,  778,  788,  779,  789,  790,  791,  792,  793,  780,  794,  795,  796,  797,
    781,  798,  799,  776,  777,  782,  783,  784,  785,  786,  800,  787,  801,  802,  803,  788,  804,
    789,  790,  791,  792,  793,  805,  794,  795,  796,  797,  806,  798,  799,  807,  808,  809,  810,
    811,  194,  1191, 800,  1191, 801,  802,  803,  1191, 804,  194,  194,  1191, 194,  813,

    805,  194,  898,  1191, 194,  806,  194,  818,  807,  808,  809,  810,  811,  194,  814,  815,  816,
    817,  194,  819,  194,  194,  194,  194,  194,  194,  813,  1191, 194,  898,  194,  194,  820,  194,
    818,  194,  194,  899,  900,  194,  194,  814,  815,  816,  817,  194,  819,  194,  194,  821,  194,
    194,  194,  194,  194,  194,  194,  194,  823,  820,  822,  1191, 194,  194,  899,  900,  194,  194,
    194,  901,  902,  194,  194,  194,  194,  903,  821,  194,  1191, 194,  194,  194,  194,  194,  824,
    823,  1191, 822,  194,  194,  194,  194,  194,  194,  1191, 194,  901,  902,  194,  194,

    194,  194,  903,  1191, 825,  827,  826,  194,  194,  194,  194,  824,  194,  194,  828,  194,  194,
    194,  194,  194,  194,  832,  194,  194,  830,  194,  904,  194,  194,  1191, 829,  825,  827,  826,
    194,  194,  194,  194,  831,  194,  194,  828,  194,  194,  905,  194,  194,  194,  832,  194,  194,
    830,  194,  904,  194,  194,  834,  829,  194,  833,  194,  194,  194,  1191, 835,  831,  194,  194,
    836,  194,  194,  905,  194,  194,  194,  1191, 1191, 1191, 194,  194,  194,  194,  194,  834,  194,
    194,  833,  194,  194,  194,  837,  835,  194,  194,  194,  836,  843,  841,  194,  194,

    839,  194,  194,  838,  194,  194,  194,  194,  194,  194,  842,  194,  194,  840,  194,  1191, 194,
    837,  194,  194,  1191, 194,  194,  843,  841,  194,  194,  839,  194,  194,  838,  194,  194,  194,
    194,  1191, 194,  842,  845,  194,  840,  194,  194,  194,  194,  194,  846,  844,  194,  194,  194,
    1191, 194,  194,  1191, 847,  194,  906,  194,  194,  194,  194,  194,  194,  194,  845,  194,  194,
    850,  194,  194,  194,  1191, 846,  844,  848,  194,  194,  194,  194,  194,  194,  847,  194,  906,
    194,  194,  194,  194,  194,  849,  194,  1191, 194,  194,  850,  194,  194,  194,  194,

    852,  194,  848,  194,  194,  194,  1191, 1191, 194,  194,  907,  851,  853,  194,  194,  194,  1191,
    849,  194,  194,  908,  194,  854,  194,  194,  194,  194,  852,  194,  194,  194,  194,  855,  194,
    194,  194,  194,  907,  851,  853,  857,  194,  1191, 856,  194,  194,  194,  908,  194,  854,  194,
    194,  194,  194,  194,  194,  194,  194,  194,  855,  194,  194,  194,  860,  194,  1191, 194,  857,
    194,  194,  856,  194,  194,  858,  1191, 1191, 859,  194,  194,  194,  194,  194,  194,  194,  194,
    194,  194,  194,  1191, 194,  860,  194,  194,  194,  1191, 863,  194,  864,  866,  194,

    858,  861,  862,  859,  194,  194,  1191, 194,  909,  1191, 194,  194,  194,  194,  194,  865,  194,
    194,  194,  194,  194,  194,  863,  194,  864,  866,  910,  1191, 861,  862,  911,  194,  912,  867,
    194,  909,  868,  194,  194,  194,  194,  194,  865,  194,  194,  194,  869,  194,  194,  1191, 194,
    870,  871,  910,  194,  194,  194,  911,  194,  912,  867,  1191, 1191, 868,  194,  194,  1191, 194,
    194,  194,  194,  194,  194,  869,  194,  194,  194,  872,  870,  871,  194,  194,  194,  194,  873,
    194,  1191, 874,  876,  194,  875,  194,  194,  194,  1191, 1191, 194,  1191, 194,  194,

    194,  194,  194,  194,  872,  1191, 878,  194,  194,  194,  913,  873,  194,  194,  874,  876,  194,
    875,  194,  194,  194,  877,  880,  194,  882,  1191, 194,  194,  194,  194,  879,  914,  194,  878,
    194,  194,  194,  913,  881,  194,  194,  1191, 194,  194,  194,  1191, 194,  194,  877,  880,  194,
    882,  194,  194,  194,  194,  194,  879,  914,  194,  194,  194,  883,  194,  194,  881,  886,  194,
    194,  194,  194,  194,  194,  194,  194,  1191, 194,  884,  885,  194,  194,  194,  194,  194,  194,
    887,  915,  194,  194,  883,  194,  194,  916,  886,  194,  194,  194,  889,  888,  194,

    892,  194,  194,  194,  884,  885,  194,  194,  891,  194,  194,  194,  887,  915,  194,  194,  194,
    893,  194,  916,  194,  194,  194,  194,  889,  888,  194,  892,  194,  194,  194,  890,  895,  194,
    194,  891,  194,  917,  194,  918,  194,  194,  194,  194,  893,  194,  894,  194,  194,  194,  194,
    919,  194,  194,  194,  920,  921,  194,  890,  895,  194,  194,  922,  194,  917,  194,  918,  194,
    896,  194,  923,  924,  925,  894,  194,  926,  927,  194,  919,  194,  930,  194,  920,  921,  931,
    928,  932,  194,  929,  922,  933,  934,  935,  936,  937,  896,  938,  923,  924,  925,

    939,  194,  926,  927,  940,  941,  942,  930,  943,  944,  945,  931,  928,  932,  946,  929,  947,
    933,  934,  935,  936,  937,  948,  938,  949,  950,  951,  939,  952,  953,  954,  940,  941,  942,
    955,  943,  944,  945,  956,  957,  958,  946,  194,  947,  194,  1191, 1191, 1191, 1191, 948,  194,
    949,  950,  951,  194,  952,  953,  954,  961,  194,  962,  955,  194,  1022, 194,  956,  957,  958,
    968,  194,  194,  194,  963,  194,  194,  960,  1191, 194,  194,  194,  194,  194,  964,  194,  194,
    961,  194,  962,  194,  194,  1022, 194,  965,  194,  194,  968,  1191, 194,  194,  963,

    194,  194,  960,  194,  194,  194,  194,  194,  1191, 964,  194,  194,  194,  966,  194,  194,  1191,
    1191, 194,  965,  194,  194,  967,  194,  194,  194,  1191, 969,  194,  971,  194,  194,  194,  194,
    970,  972,  1191, 973,  194,  194,  966,  194,  1191, 194,  194,  194,  1023, 1024, 194,  967,  194,
    194,  977,  194,  969,  194,  971,  194,  194,  194,  194,  970,  972,  194,  973,  194,  194,  974,
    194,  978,  194,  194,  194,  1023, 1024, 194,  1191, 976,  194,  977,  194,  975,  194,  194,  194,
    194,  194,  1025, 194,  194,  194,  194,  981,  194,  974,  194,  978,  979,  194,  194,

    1026, 194,  194,  194,  976,  194,  980,  982,  975,  194,  194,  194,  194,  194,  1025, 194,  194,
    194,  194,  981,  983,  194,  194,  194,  979,  194,  194,  1026, 194,  194,  194,  194,  194,  980,
    982,  194,  194,  194,  194,  194,  1027, 984,  194,  985,  194,  1191, 194,  983,  194,  194,  194,
    194,  194,  194,  986,  194,  194,  194,  194,  194,  194,  1191, 194,  194,  194,  194,  1191, 1027,
    984,  194,  985,  194,  194,  194,  989,  987,  194,  194,  194,  194,  194,  986,  194,  194,  194,
    194,  988,  194,  194,  194,  990,  194,  194,  991,  194,  992,  194,  1191, 194,  194,

    1191, 989,  987,  194,  194,  194,  194,  194,  194,  194,  194,  993,  194,  988,  194,  194,  194,
    990,  194,  1028, 991,  194,  992,  194,  194,  194,  194,  996,  994,  194,  194,  194,  194,  194,
    194,  194,  194,  194,  993,  995,  1191, 194,  194,  194,  194,  194,  1028, 998,  1029, 194,  1191,
    194,  194,  194,  996,  994,  194,  194,  194,  1001, 997,  194,  194,  194,  194,  194,  995,  194,
    194,  194,  194,  194,  194,  194,  998,  1029, 194,  999,  194,  194,  1030, 1000, 1002, 1031, 194,
    1191, 1001, 997,  194,  194,  194,  194,  194,  194,  194,  194,  1191, 1003, 194,  1004,

    194,  194,  194,  194,  999,  194,  194,  1030, 1000, 1002, 1031, 194,  1005, 194,  194,  194,  1191,
    1006, 1007, 1032, 194,  194,  194,  194,  1003, 194,  1004, 194,  194,  194,  194,  1008, 194,  194,
    194,  1191, 1191, 194,  1009, 1005, 194,  194,  194,  194,  1006, 1007, 1032, 194,  194,  194,  194,
    1010, 194,  194,  194,  1015, 1011, 194,  1008, 194,  194,  194,  194,  194,  194,  1009, 1033, 1013,
    1012, 194,  194,  194,  1014, 194,  194,  194,  194,  1017, 1010, 194,  194,  194,  1015, 1011, 194,
    1016, 194,  1034, 1035, 194,  194,  194,  1191, 1033, 1013, 1012, 194,  194,  194,  1014,

    194,  194,  194,  194,  1017, 194,  194,  1019, 194,  194,  194,  194,  1016, 194,  1034, 1035, 1020,
    1036, 194,  1018, 194,  1037, 1038, 194,  194,  194,  1039, 1040, 194,  194,  194,  194,  194,  194,
    1019, 1041, 194,  194,  194,  1042, 194,  1043, 1044, 1020, 1036, 1045, 1018, 194,  1037, 1038, 1046,
    1047, 194,  1039, 1040, 1048, 194,  194,  194,  1049, 1050, 1051, 1041, 1052, 1053, 1054, 1042, 194,
    1043, 1044, 1055, 1056, 1045, 1057, 1059, 194,  194,  1046, 1047, 1061, 1191, 1191, 1048, 1191, 1096,
    1060, 1049, 1050, 1051, 194,  1052, 1053, 1054, 194,  194,  194,  194,  1055, 1056, 194,

    1057, 1059, 194,  194,  1062, 194,  1061, 1063, 194,  194,  194,  1096, 1060, 194,  1191, 1064, 194,
    1191, 1191, 194,  194,  194,  194,  194,  1097, 194,  194,  1065, 194,  194,  194,  1062, 194,  194,
    1063, 194,  194,  194,  194,  194,  194,  1066, 1064, 194,  1068, 1067, 194,  194,  1191, 194,  1191,
    1097, 194,  194,  1065, 194,  194,  194,  194,  1069, 194,  194,  194,  194,  194,  194,  194,  194,
    1066, 1098, 194,  1068, 1067, 1070, 194,  194,  194,  194,  1071, 194,  194,  194,  194,  194,  194,
    194,  1069, 194,  194,  194,  194,  194,  1072, 194,  194,  194,  1098, 194,  194,  194,

    1070, 194,  194,  194,  194,  1071, 194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  1073,
    194,  194,  1072, 194,  194,  194,  1191, 194,  194,  194,  1075, 194,  1076, 194,  1074, 194,  194,
    194,  194,  1191, 194,  194,  194,  194,  194,  194,  1073, 194,  194,  194,  194,  194,  194,  194,
    1079, 194,  194,  1075, 194,  1076, 1078, 1074, 194,  194,  194,  194,  1077, 194,  194,  194,  1081,
    194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  1079, 194,  194,  194,  194,  194,  1078,
    1191, 1080, 194,  194,  1099, 1077, 194,  194,  194,  1081, 194,  194,  194,  194,  194,

    1191, 1082, 194,  194,  1083, 1084, 194,  194,  194,  1085, 194,  1191, 194,  1080, 194,  194,  1099,
    194,  194,  194,  194,  194,  194,  194,  1191, 1100, 194,  194,  1082, 1087, 194,  1083, 1084, 194,
    194,  1086, 1085, 194,  194,  194,  194,  194,  194,  194,  194,  1088, 194,  194,  194,  1101, 194,
    1089, 1100, 194,  194,  194,  1087, 1090, 194,  194,  194,  194,  1086, 194,  194,  194,  194,  194,
    194,  1091, 194,  194,  1088, 194,  1092, 194,  1101, 194,  1089, 194,  194,  194,  194,  194,  1090,
    194,  194,  194,  194,  1191, 194,  194,  194,  194,  1102, 1103, 1091, 194,  194,  1104,

    1105, 1092, 194,  1106, 194,  1093, 194,  194,  194,  194,  194,  1107, 194,  1108, 1109, 1110, 1094,
    1111, 194,  194,  1191, 1102, 1103, 1191, 194,  194,  1104, 1105, 194,  194,  1106, 194,  1093, 1113,
    194,  1191, 194,  194,  1107, 194,  1108, 1109, 1110, 1094, 1111, 194,  1114, 194,  194,  194,  1116,
    194,  194,  194,  194,  194,  194,  194,  194,  1115, 1113, 194,  194,  194,  194,  1130, 194,  194,
    194,  194,  194,  194,  194,  1114, 194,  194,  194,  1116, 194,  194,  194,  194,  194,  194,  194,
    194,  1115, 194,  194,  194,  194,  194,  1130, 194,  194,  194,  194,  194,  194,  194,

    1117, 1118, 194,  194,  194,  194,  194,  194,  1131, 194,  194,  1119, 194,  1191, 194,  194,  1121,
    194,  194,  194,  194,  1191, 194,  194,  194,  194,  194,  1117, 1118, 194,  194,  194,  194,  1120,
    194,  1131, 194,  194,  1119, 194,  194,  194,  194,  1121, 194,  194,  194,  194,  1123, 194,  194,
    194,  194,  194,  1132, 1191, 1122, 194,  194,  194,  1120, 194,  194,  194,  194,  1191, 194,  194,
    194,  194,  1133, 1125, 194,  194,  1124, 1123, 194,  194,  194,  194,  194,  1132, 194,  1122, 194,
    194,  194,  1128, 194,  194,  1126, 1127, 194,  194,  1134, 1135, 194,  1133, 1125, 1136,

    194,  1124, 194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  1128, 1191, 194,
    1126, 1127, 194,  194,  1134, 1135, 194,  1138, 1139, 1136, 194,  194,  194,  194,  194,  1191, 194,
    194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,  1140, 1191, 194,
    1138, 1139, 194,  194,  194,  194,  194,  194,  1141, 194,  194,  194,  194,  194,  194,  194,  194,
    194,  194,  194,  194,  194,  194,  194,  1140, 1142, 194,  1143, 194,  194,  194,  1147, 194,  1148,
    1144, 1141, 194,  194,  194,  1149, 194,  194,  194,  194,  1151, 1152, 194,  194,  194,

    1191, 194,  194,  1142, 194,  1143, 194,  194,  194,  1147, 1157, 1148, 1144, 1146, 194,  1151, 194,
    1149, 194,  194,  194,  1153, 194,  1152, 194,  194,  194,  194,  194,  194,  1191, 194,  194,  194,
    194,  1162, 1164, 1157, 194,  194,  194,  194,  1154, 194,  1166, 194,  194,  194,  1153, 194,  1160,
    194,  194,  194,  194,  1156, 1168, 1159, 194,  194,  194,  194,  1162, 1164, 1170, 194,  194,  194,
    194,  1154, 1172, 1166, 1174, 1176, 1178, 1180, 1182, 1160, 1184, 194,  194,  1191, 1156, 1168, 1159,
    194,  1191, 1191, 194,  1191, 1191, 1170, 1191, 1191, 1191, 1191, 1191, 1172, 1191, 1174,

    1176, 1178, 1180, 1182, 1191, 1184, 46,   46,   46,   46,   46,   88,   1191, 1191, 88,   88,   179,
    179,  179,  1191, 179,  181,  1191, 181,  181,  181,  184,  1191, 184,  184,  184,  194,  1191, 194,
    194,  194,  7,    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191};

static const flex_int16_t yy_chk[4814] = {
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    9,    9,    10,   10,   15,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   15,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   18,   18,   21,   22,   21,   24,
    1194, 23,   30,   24,   21,   1188, 21,   24,   23,   31,   21,   21,   44,   24,   99,

    23,   24,   22,   23,   1187, 25,   1186, 25,   21,   22,   21,   24,   25,   23,   30,   24,   21,
    25,   21,   24,   23,   31,   21,   21,   44,   24,   99,   23,   24,   22,   23,   27,   25,   28,
    25,   1185, 32,   27,   1183, 25,   32,   28,   29,   42,   25,   26,   32,   28,   29,   29,   29,
    42,   1181, 26,   1179, 29,   26,   1177, 27,   26,   28,   1175, 26,   32,   27,   26,   1173, 32,
    28,   29,   42,   1171, 26,   32,   28,   29,   29,   29,   42,   34,   26,   33,   29,   26,   36,
    33,   26,   43,   43,   26,   35,   33,   26,   34,   100,  36,   49,   49,   35,   34,

    34,   36,   35,   38,   1169, 35,   34,   38,   33,   50,   50,   36,   33,   38,   43,   43,   1167,
    35,   33,   1165, 34,   100,  36,   103,  55,   35,   34,   34,   36,   35,   38,   41,   35,   41,
    38,   55,   41,   58,   58,   1163, 38,   39,   104,  39,   1161, 71,   39,   77,   86,   86,   103,
    39,   1158, 39,   39,   1155, 70,   1150, 41,   1145, 41,   108,  1137, 41,   67,   71,   70,   77,
    39,   104,  39,   67,   71,   39,   77,   72,   70,   67,   39,   72,   39,   39,   40,   70,   67,
    72,   40,   110,  108,  40,   40,   67,   71,   70,   77,   72,   40,   110,  67,   40,

    182,  182,  72,   70,   67,   1130, 72,   1129, 1112, 40,   1095, 67,   72,   40,   110,  1058, 40,
    40,   1021, 959,  897,  812,  72,   40,   110,  727,  40,   56,   56,   56,   56,   56,   56,   56,
    56,   56,   56,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   57,   61,   61,   616,
    61,   61,   61,   61,   61,   61,   84,   68,   114,  505,  391,  68,   276,  186,  115,  68,   61,
    61,   61,   73,   101,  68,   61,   73,   61,   116,  84,   117,  101,  73,   61,   68,   61,   84,
    68,   114,  61,   61,   68,   73,   102,  115,  68,   102,  184,  90,   73,   101,  68,

    61,   73,   61,   116,  84,   117,  101,  73,   61,   68,   61,   88,   85,   118,  61,   61,   60,
    73,   102,  59,   52,   102,  76,   61,   62,   62,   76,   62,   62,   62,   62,   62,   62,   76,
    82,   51,   47,   78,   82,   76,   118,  78,   82,   62,   62,   62,   76,   78,   120,  76,   62,
    45,   20,   76,   121,  19,   122,  78,   82,   83,   76,   82,   83,   83,   78,   82,   76,   11,
    78,   82,   62,   107,  7,    76,   78,   120,  123,  62,   107,  83,   4,    121,  81,   122,  78,
    82,   83,   3,    0,    83,   83,   81,   124,  81,   105,  105,  81,   62,   107,  62,

    63,   125,  81,   123,  63,   107,  83,   63,   105,  81,   0,    109,  109,  109,  63,   109,  0,
    63,   81,   124,  81,   105,  105,  81,   63,   0,    126,  63,   125,  81,   127,  63,   111,  0,
    63,   105,  129,  111,  109,  109,  109,  63,   109,  112,  63,   112,  113,  113,  112,  0,    130,
    63,   64,   126,  112,  0,    64,   127,  132,  111,  64,   112,  133,  129,  111,  119,  64,   119,
    135,  64,   112,  119,  112,  113,  113,  112,  64,   130,  119,  64,   136,  112,  119,  64,   0,
    132,  0,    64,   112,  133,  137,  0,    119,  64,   119,  135,  64,   0,    119,  128,

    134,  138,  128,  64,   65,   119,  139,  136,  139,  119,  134,  65,   141,  65,   142,  134,  134,
    137,  65,   140,  143,  140,  144,  65,   65,   0,    128,  134,  138,  128,  145,  65,   140,  139,
    146,  139,  0,    134,  65,   141,  65,   142,  134,  134,  147,  65,   140,  143,  140,  144,  65,
    65,   66,   148,  150,  151,  66,   145,  152,  140,  66,   146,  153,  66,   154,  156,  66,   157,
    154,  66,   158,  147,  66,   0,    0,    160,  66,   0,    0,    66,   148,  150,  151,  66,   0,
    152,  0,    66,   155,  153,  66,   154,  156,  66,   157,  154,  66,   158,  161,  66,

    159,  155,  160,  66,   69,   69,   155,  162,  163,  159,  164,  69,   69,   69,   166,  155,  167,
    159,  69,   165,  168,  171,  169,  170,  69,   161,  170,  159,  155,  0,    165,  69,   69,   155,
    162,  163,  159,  164,  69,   69,   69,   166,  169,  167,  159,  69,   165,  168,  171,  169,  170,
    69,   74,   170,  172,  173,  74,   165,  174,  175,  176,  173,  177,  279,  194,  0,    74,   0,
    0,    169,  281,  174,  74,   74,   195,  195,  74,   0,    0,    74,   0,    172,  173,  74,   194,
    174,  175,  176,  173,  177,  279,  194,  196,  74,   202,  195,  0,    281,  174,  74,

    74,   195,  195,  74,   75,   75,   227,  196,  197,  0,    282,  194,  196,  75,   202,  197,  199,
    75,   0,    196,  75,   202,  195,  197,  75,   0,    227,  0,    197,  199,  0,    75,   75,   227,
    196,  197,  199,  282,  0,    196,  75,   202,  197,  199,  75,   198,  284,  75,   198,  198,  197,
    75,   79,   227,  79,   197,  199,  79,   200,  286,  200,  0,    79,   199,  79,   79,   0,    0,
    0,    198,  0,    0,    198,  284,  79,   198,  198,  0,    206,  79,   200,  79,   0,    0,    79,
    200,  286,  200,  206,  79,   0,    79,   79,   201,  201,  201,  198,  203,  206,  0,

    287,  79,   80,   207,  203,  206,  80,   200,  201,  80,   80,   203,  288,  201,  289,  206,  80,
    203,  207,  80,   201,  201,  201,  207,  203,  206,  80,   287,  0,    80,   207,  203,  0,    80,
    0,    201,  80,   80,   203,  288,  201,  289,  0,    80,   203,  207,  80,   0,    0,    0,    207,
    0,    0,    80,   91,   91,   91,   91,   91,   91,   91,   91,   91,   91,   92,   92,   92,   92,
    92,   92,   92,   92,   92,   92,   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
    187,  187,  187,  187,  187,  187,  187,  187,  187,  187,  188,  188,  188,  188,  188,

    188,  188,  188,  188,  188,  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,  204,
    209,  210,  211,  204,  291,  212,  292,  293,  294,  0,    0,    295,  211,  209,  209,  213,  213,
    210,  0,    212,  209,  210,  211,  204,  0,    212,  204,  209,  210,  211,  204,  291,  212,  292,
    293,  294,  213,  233,  295,  211,  209,  209,  213,  213,  210,  229,  212,  209,  210,  211,  204,
    205,  212,  214,  0,    214,  229,  233,  205,  205,  205,  216,  205,  213,  233,  229,  0,    0,
    216,  296,  297,  205,  229,  0,    0,    214,  0,    0,    205,  298,  214,  216,  214,

    229,  233,  205,  205,  205,  216,  205,  0,    299,  229,  217,  219,  216,  296,  297,  205,  208,
    217,  208,  214,  208,  208,  218,  298,  219,  216,  220,  208,  0,    0,    217,  219,  218,  0,
    208,  299,  220,  217,  219,  0,    208,  0,    218,  208,  217,  208,  220,  208,  208,  218,  300,
    219,  237,  220,  208,  221,  222,  217,  219,  218,  245,  208,  221,  220,  0,    237,  222,  208,
    215,  218,  215,  0,    237,  220,  215,  221,  222,  300,  223,  237,  245,  215,  221,  222,  0,
    215,  0,    245,  223,  221,  215,  225,  237,  222,  240,  215,  224,  215,  223,  237,

    225,  215,  221,  222,  226,  223,  0,    245,  215,  240,  224,  225,  215,  224,  240,  223,  224,
    215,  225,  231,  226,  240,  228,  224,  226,  223,  228,  225,  231,  0,    232,  226,  234,  234,
    232,  301,  240,  224,  225,  231,  224,  240,  228,  224,  0,    302,  231,  226,  235,  228,  232,
    226,  234,  228,  235,  231,  235,  232,  0,    234,  234,  232,  301,  236,  0,    236,  231,  236,
    235,  228,  230,  230,  302,  238,  0,    235,  236,  232,  0,    234,  230,  235,  238,  235,  241,
    230,  230,  236,  304,  0,    236,  230,  236,  238,  236,  235,  239,  230,  230,  241,

    238,  242,  305,  236,  241,  239,  243,  230,  242,  238,  243,  241,  230,  230,  236,  304,  239,
    0,    230,  0,    238,  242,  0,    239,  244,  244,  241,  247,  242,  305,  243,  241,  239,  243,
    0,    242,  248,  243,  246,  246,  306,  250,  247,  239,  244,  250,  249,  247,  242,  248,  249,
    244,  244,  0,    247,  0,    248,  243,  307,  246,  252,  250,  252,  248,  0,    246,  246,  306,
    250,  247,  249,  244,  250,  249,  247,  0,    248,  249,  251,  308,  252,  254,  251,  248,  254,
    307,  246,  252,  250,  252,  256,  251,  253,  0,    0,    0,    251,  249,  309,  253,

    256,  254,  251,  0,    311,  251,  308,  252,  254,  251,  256,  254,  253,  255,  0,    255,  0,
    256,  251,  253,  257,  258,  255,  251,  257,  309,  253,  256,  254,  251,  255,  311,  259,  312,
    258,  255,  259,  256,  0,    253,  255,  258,  255,  260,  257,  261,  260,  257,  258,  255,  313,
    257,  314,  261,  262,  315,  259,  255,  264,  259,  312,  258,  255,  259,  261,  261,  260,  263,
    258,  264,  260,  257,  261,  260,  262,  263,  0,    313,  264,  314,  261,  262,  315,  259,  265,
    264,  0,    263,  265,  267,  267,  261,  261,  260,  263,  0,    264,  316,  0,    266,

    271,  262,  263,  266,  265,  264,  266,  0,    265,  268,  267,  265,  270,  268,  263,  265,  267,
    267,  273,  266,  271,  269,  273,  272,  316,  270,  266,  271,  269,  268,  266,  265,  270,  266,
    269,  265,  268,  267,  272,  270,  268,  269,  273,  272,  0,    273,  266,  271,  269,  273,  272,
    0,    270,  0,    0,    269,  268,  317,  318,  270,  319,  269,  320,  321,  290,  272,  290,  303,
    269,  273,  272,  277,  277,  277,  277,  277,  277,  277,  277,  277,  277,  290,  303,  322,  317,
    318,  323,  319,  324,  320,  321,  290,  325,  290,  303,  326,  327,  328,  329,  330,

    331,  332,  333,  335,  334,  336,  338,  339,  290,  303,  322,  340,  341,  323,  334,  324,  342,
    343,  344,  325,  345,  346,  326,  327,  328,  329,  330,  331,  332,  333,  335,  334,  336,  338,
    339,  347,  349,  350,  340,  341,  351,  334,  352,  342,  343,  344,  353,  345,  346,  354,  355,
    356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  367,  347,  349,  350,  368,  369,  351,
    370,  352,  371,  372,  373,  353,  374,  375,  354,  355,  356,  357,  358,  359,  360,  361,  362,
    363,  364,  365,  367,  377,  380,  378,  368,  369,  379,  370,  379,  371,  372,  373,

    378,  374,  375,  381,  382,  383,  384,  385,  386,  387,  388,  389,  0,    387,  0,    0,    377,
    380,  378,  0,    0,    379,  0,    379,  0,    0,    0,    378,  0,    0,    381,  382,  383,  384,
    385,  386,  387,  388,  389,  393,  387,  392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
    394,  395,  396,  397,  398,  400,  0,    0,    393,  399,  397,  0,    0,    399,  0,    393,  506,
    0,    507,  0,    394,  395,  396,  397,  398,  400,  409,  394,  395,  396,  397,  398,  400,  399,
    401,  393,  399,  397,  402,  403,  399,  409,  402,  506,  401,  507,  409,  394,  395,

    396,  397,  398,  400,  409,  401,  404,  0,    403,  402,  403,  399,  401,  404,  406,  0,    402,
    403,  0,    409,  402,  405,  401,  405,  409,  508,  404,  406,  0,    407,  0,    408,  401,  404,
    406,  403,  402,  403,  405,  408,  404,  406,  410,  405,  0,    407,  0,    413,  405,  407,  405,
    408,  508,  404,  406,  411,  407,  412,  408,  411,  0,    406,  410,  0,    0,    405,  408,  413,
    415,  410,  405,  412,  407,  414,  413,  415,  407,  412,  408,  411,  0,    416,  411,  0,    412,
    416,  411,  414,  415,  410,  418,  420,  417,  414,  413,  415,  417,  0,    412,  0,

    414,  416,  415,  0,    412,  418,  411,  419,  416,  419,  418,  420,  416,  424,  414,  415,  417,
    418,  420,  417,  414,  509,  422,  417,  421,  422,  425,  427,  416,  419,  423,  426,  418,  424,
    419,  426,  419,  418,  420,  421,  424,  423,  0,    417,  421,  422,  425,  427,  509,  422,  423,
    421,  422,  425,  427,  426,  419,  423,  426,  428,  424,  428,  426,  430,  429,  432,  421,  431,
    423,  433,  430,  421,  422,  425,  427,  510,  0,    423,  429,  432,  431,  428,  426,  430,  429,
    432,  428,  431,  428,  433,  430,  429,  432,  435,  431,  434,  433,  430,  0,    434,

    438,  435,  510,  438,  0,    429,  432,  431,  428,  436,  430,  429,  432,  435,  431,  439,  433,
    436,  437,  434,  435,  440,  434,  438,  440,  437,  434,  438,  435,  436,  438,  439,  0,    441,
    442,  439,  436,  441,  437,  446,  435,  440,  439,  0,    436,  437,  434,  447,  440,  442,  438,
    440,  437,  441,  442,  0,    436,  443,  439,  446,  441,  442,  439,  444,  441,  437,  446,  447,
    440,  444,  443,  448,  445,  450,  447,  449,  442,  443,  0,    0,    441,  442,  445,  444,  443,
    449,  446,  0,    452,  450,  444,  448,  445,  450,  447,  449,  444,  443,  448,  445,

    450,  0,    449,  454,  443,  451,  453,  455,  452,  445,  444,  455,  449,  457,  451,  452,  450,
    457,  448,  445,  450,  453,  449,  454,  0,    451,  453,  455,  456,  456,  454,  460,  451,  453,
    455,  452,  0,    457,  455,  0,    457,  451,  463,  458,  457,  458,  461,  460,  453,  456,  454,
    460,  451,  453,  455,  456,  456,  459,  460,  459,  464,  461,  463,  458,  457,  462,  461,  464,
    0,    463,  458,  467,  458,  461,  460,  0,    456,  459,  460,  468,  464,  462,  465,  466,  459,
    462,  459,  464,  461,  463,  458,  467,  462,  461,  464,  465,  469,  466,  467,  468,

    469,  0,    465,  466,  459,  470,  468,  464,  462,  465,  466,  472,  462,  0,    470,  511,  0,
    471,  467,  472,  469,  0,    465,  469,  466,  470,  468,  469,  471,  465,  466,  472,  470,  473,
    475,  474,  477,  471,  472,  474,  473,  470,  511,  477,  471,  476,  472,  469,  476,  475,  0,
    478,  470,  473,  475,  471,  477,  480,  472,  474,  473,  475,  474,  477,  471,  476,  474,  473,
    481,  479,  477,  478,  476,  482,  512,  476,  475,  480,  478,  479,  473,  475,  484,  477,  480,
    514,  474,  483,  481,  479,  485,  482,  476,  482,  483,  481,  479,  484,  478,  0,

    482,  512,  484,  517,  480,  485,  479,  483,  488,  484,  485,  487,  514,  490,  483,  481,  479,
    485,  482,  486,  482,  483,  487,  488,  484,  491,  486,  489,  488,  484,  517,  487,  485,  490,
    483,  488,  489,  485,  487,  486,  490,  0,    492,  0,    0,    491,  486,  489,  493,  487,  488,
    492,  491,  486,  489,  488,  0,    493,  487,  0,    490,  494,  492,  489,  0,    501,  486,  495,
    493,  492,  498,  494,  491,  494,  489,  493,  0,    495,  492,  496,  501,  494,  497,  496,  493,
    501,  498,  495,  494,  492,  498,  497,  501,  0,    495,  493,  0,    498,  494,  499,

    494,  499,  497,  496,  495,  500,  496,  501,  494,  497,  496,  502,  501,  498,  495,  0,    503,
    498,  497,  503,  502,  499,  504,  500,  502,  500,  499,  518,  499,  497,  496,  502,  500,  519,
    520,  504,  503,  522,  502,  523,  524,  526,  504,  503,  527,  528,  503,  502,  499,  504,  500,
    502,  500,  529,  518,  530,  531,  532,  502,  533,  519,  520,  504,  503,  522,  534,  523,  524,
    526,  504,  537,  527,  528,  538,  539,  540,  541,  542,  543,  545,  529,  546,  530,  531,  532,
    549,  533,  550,  552,  554,  555,  556,  534,  557,  558,  559,  560,  537,  562,  566,

    538,  539,  540,  541,  542,  543,  545,  560,  546,  568,  570,  572,  549,  573,  550,  552,  554,
    555,  556,  575,  557,  558,  559,  560,  576,  562,  566,  571,  571,  577,  578,  579,  581,  582,
    560,  584,  568,  570,  572,  585,  573,  586,  587,  588,  589,  590,  575,  592,  593,  594,  595,
    576,  596,  599,  571,  571,  577,  578,  579,  581,  582,  600,  584,  602,  603,  604,  585,  605,
    586,  587,  588,  589,  590,  606,  592,  593,  594,  595,  607,  596,  599,  608,  609,  611,  613,
    615,  617,  0,    600,  0,    602,  603,  604,  0,    605,  619,  620,  0,    622,  617,

    606,  618,  730,  0,    621,  607,  617,  622,  608,  609,  611,  613,  615,  617,  618,  619,  620,
    621,  622,  623,  624,  618,  619,  620,  621,  622,  617,  0,    618,  730,  626,  621,  625,  617,
    622,  627,  625,  732,  734,  623,  624,  618,  619,  620,  621,  622,  623,  624,  618,  628,  626,
    621,  629,  628,  630,  627,  625,  626,  630,  625,  629,  0,    627,  625,  732,  734,  623,  624,
    632,  735,  736,  631,  629,  628,  630,  737,  628,  626,  0,    629,  628,  630,  627,  625,  631,
    630,  0,    629,  632,  633,  635,  631,  634,  636,  0,    632,  735,  736,  631,  629,

    628,  630,  737,  0,    633,  635,  634,  637,  639,  633,  635,  631,  634,  636,  637,  632,  633,
    635,  631,  634,  636,  641,  638,  640,  639,  641,  738,  637,  639,  0,    638,  633,  635,  634,
    637,  639,  633,  635,  640,  634,  636,  637,  638,  640,  739,  641,  642,  646,  641,  638,  640,
    639,  641,  738,  637,  639,  643,  638,  643,  642,  644,  645,  647,  0,    644,  640,  642,  646,
    645,  638,  640,  739,  641,  642,  646,  0,    0,    0,    643,  648,  644,  645,  647,  643,  650,
    643,  642,  644,  645,  647,  648,  644,  649,  642,  646,  645,  654,  652,  651,  648,

    650,  652,  655,  649,  650,  643,  648,  644,  645,  647,  653,  650,  649,  651,  653,  0,    654,
    648,  651,  649,  0,    652,  655,  654,  652,  651,  648,  650,  652,  655,  649,  650,  656,  658,
    653,  0,    659,  653,  657,  649,  651,  653,  657,  654,  661,  651,  660,  656,  652,  655,  660,
    0,    656,  658,  0,    661,  659,  740,  662,  656,  658,  653,  657,  659,  661,  657,  663,  664,
    666,  657,  660,  661,  0,    660,  656,  663,  665,  660,  662,  656,  658,  668,  661,  659,  740,
    662,  663,  664,  666,  657,  665,  661,  0,    663,  664,  666,  665,  660,  667,  669,

    668,  668,  663,  665,  672,  662,  0,    0,    668,  670,  742,  667,  669,  663,  664,  666,  0,
    665,  667,  669,  743,  674,  670,  665,  672,  667,  669,  668,  668,  670,  671,  672,  671,  673,
    675,  676,  670,  742,  667,  669,  673,  674,  0,    671,  678,  667,  669,  743,  674,  670,  671,
    672,  680,  673,  675,  676,  670,  671,  677,  671,  673,  675,  676,  681,  678,  0,    685,  673,
    674,  679,  671,  678,  680,  677,  0,    0,    679,  671,  677,  680,  673,  675,  676,  681,  684,
    677,  685,  682,  0,    679,  681,  678,  683,  685,  0,    683,  679,  684,  687,  680,

    677,  682,  682,  679,  684,  677,  0,    682,  744,  0,    681,  684,  683,  685,  682,  686,  679,
    686,  687,  683,  688,  691,  683,  689,  684,  687,  745,  0,    682,  682,  746,  684,  748,  688,
    682,  744,  689,  686,  690,  683,  688,  691,  686,  689,  686,  687,  690,  688,  691,  0,    689,
    692,  693,  745,  694,  692,  693,  746,  690,  748,  688,  0,    0,    689,  686,  690,  0,    688,
    691,  695,  689,  696,  697,  690,  694,  692,  693,  695,  692,  693,  699,  694,  692,  693,  696,
    690,  0,    697,  699,  695,  698,  696,  697,  698,  0,    0,    695,  0,    696,  697,

    699,  694,  692,  693,  695,  0,    701,  699,  701,  702,  749,  696,  700,  698,  697,  699,  695,
    698,  696,  697,  698,  700,  704,  703,  706,  0,    708,  699,  701,  702,  703,  750,  700,  701,
    705,  701,  702,  749,  705,  700,  698,  0,    704,  703,  706,  0,    708,  709,  700,  704,  703,
    706,  707,  708,  705,  701,  702,  703,  750,  700,  712,  705,  707,  710,  711,  705,  713,  709,
    713,  704,  703,  706,  707,  708,  709,  0,    714,  710,  711,  707,  712,  705,  715,  710,  711,
    714,  751,  712,  713,  707,  710,  711,  752,  713,  709,  713,  714,  716,  715,  707,

    719,  716,  715,  714,  710,  711,  718,  712,  718,  715,  710,  711,  714,  751,  720,  713,  717,
    720,  721,  752,  719,  716,  723,  714,  716,  715,  718,  719,  716,  715,  722,  717,  724,  718,
    720,  718,  717,  753,  721,  754,  725,  720,  723,  717,  720,  721,  722,  719,  716,  723,  722,
    755,  724,  718,  726,  756,  757,  722,  717,  724,  725,  720,  760,  717,  753,  721,  754,  725,
    726,  723,  761,  763,  766,  722,  726,  769,  770,  722,  755,  724,  772,  726,  756,  757,  777,
    771,  778,  725,  771,  760,  779,  780,  781,  784,  785,  726,  786,  761,  763,  766,

    787,  726,  769,  770,  788,  790,  791,  772,  792,  793,  794,  777,  771,  778,  795,  771,  796,
    779,  780,  781,  784,  785,  797,  786,  798,  799,  800,  787,  801,  803,  804,  788,  790,  791,
    805,  792,  793,  794,  807,  808,  809,  795,  813,  796,  814,  0,    0,    0,    0,    797,  816,
    798,  799,  800,  815,  801,  803,  804,  817,  818,  819,  805,  813,  898,  814,  807,  808,  809,
    825,  813,  816,  814,  820,  820,  815,  815,  0,    816,  817,  818,  819,  815,  821,  822,  821,
    817,  818,  819,  825,  813,  898,  814,  822,  820,  826,  825,  0,    816,  823,  820,

    820,  815,  815,  822,  821,  817,  818,  819,  0,    821,  822,  821,  824,  823,  826,  825,  0,
    0,    823,  822,  820,  826,  824,  827,  828,  823,  0,    827,  830,  829,  822,  821,  824,  829,
    828,  830,  0,    831,  832,  824,  823,  826,  0,    827,  828,  823,  900,  901,  830,  824,  827,
    828,  836,  829,  827,  830,  829,  831,  832,  824,  829,  828,  830,  833,  831,  832,  834,  833,
    835,  837,  827,  828,  836,  900,  901,  830,  0,    835,  840,  836,  829,  834,  838,  833,  831,
    832,  834,  902,  835,  837,  833,  839,  840,  834,  833,  835,  837,  838,  840,  836,

    903,  843,  838,  841,  835,  840,  839,  841,  834,  838,  833,  839,  844,  834,  902,  835,  837,
    847,  839,  840,  842,  843,  842,  841,  838,  840,  845,  903,  843,  838,  841,  849,  844,  839,
    841,  850,  846,  847,  839,  844,  905,  845,  842,  846,  847,  0,    845,  842,  843,  842,  841,
    849,  848,  845,  848,  850,  846,  852,  849,  844,  851,  0,    850,  846,  847,  853,  0,    905,
    845,  842,  846,  854,  848,  845,  855,  851,  856,  852,  849,  848,  851,  848,  850,  846,  852,
    853,  854,  851,  857,  858,  856,  854,  853,  856,  855,  857,  856,  0,    854,  848,

    0,    855,  851,  856,  852,  859,  860,  851,  857,  858,  861,  862,  853,  854,  863,  857,  858,
    856,  854,  907,  856,  855,  857,  856,  865,  859,  860,  865,  863,  867,  861,  862,  859,  860,
    863,  857,  858,  861,  862,  864,  0,    863,  868,  864,  865,  866,  907,  869,  908,  867,  0,
    865,  859,  860,  865,  863,  867,  861,  862,  872,  866,  863,  868,  864,  870,  866,  864,  869,
    871,  868,  864,  865,  866,  874,  869,  908,  867,  870,  873,  872,  909,  871,  873,  910,  870,
    0,    872,  866,  871,  868,  864,  870,  866,  874,  869,  871,  0,    875,  873,  876,

    874,  875,  878,  876,  870,  873,  872,  909,  871,  873,  910,  870,  877,  877,  879,  871,  0,
    878,  879,  912,  874,  875,  878,  876,  875,  873,  876,  887,  875,  878,  876,  880,  880,  877,
    879,  0,    0,    882,  881,  877,  877,  879,  881,  883,  878,  879,  912,  887,  875,  878,  876,
    882,  880,  884,  887,  888,  883,  882,  880,  880,  877,  879,  881,  883,  882,  881,  914,  885,
    884,  881,  883,  885,  886,  884,  887,  888,  886,  890,  882,  880,  884,  891,  888,  883,  882,
    889,  889,  918,  920,  881,  883,  885,  0,    914,  885,  884,  886,  890,  885,  886,

    884,  891,  888,  886,  890,  892,  889,  893,  891,  895,  896,  893,  889,  889,  918,  920,  894,
    921,  885,  892,  894,  927,  928,  886,  890,  892,  929,  931,  891,  895,  896,  893,  892,  889,
    893,  933,  895,  896,  893,  934,  894,  936,  937,  894,  921,  938,  892,  894,  927,  928,  940,
    941,  892,  929,  931,  942,  895,  896,  893,  943,  945,  947,  933,  949,  950,  951,  934,  894,
    936,  937,  952,  957,  938,  958,  960,  961,  962,  940,  941,  963,  0,    0,    942,  0,    1025,
    962,  943,  945,  947,  964,  949,  950,  951,  965,  960,  961,  962,  952,  957,  963,

    958,  960,  961,  962,  964,  966,  963,  965,  967,  964,  968,  1025, 962,  965,  0,    967,  964,
    0,    0,    969,  965,  960,  961,  962,  1028, 966,  963,  969,  967,  972,  968,  964,  966,  973,
    965,  967,  964,  968,  971,  969,  965,  970,  967,  970,  972,  971,  969,  975,  0,    972,  0,
    1028, 966,  973,  969,  967,  972,  968,  971,  974,  973,  977,  974,  970,  978,  971,  969,  975,
    970,  1029, 970,  972,  971,  976,  975,  976,  972,  979,  980,  981,  973,  977,  974,  982,  978,
    971,  974,  984,  977,  974,  970,  978,  982,  985,  975,  976,  1029, 979,  980,  981,

    976,  983,  976,  982,  979,  980,  981,  984,  977,  974,  982,  978,  986,  985,  984,  987,  983,
    988,  989,  982,  985,  983,  976,  0,    979,  980,  981,  990,  983,  991,  982,  989,  986,  991,
    984,  987,  0,    988,  989,  986,  985,  992,  987,  983,  988,  989,  994,  990,  983,  993,  995,
    996,  997,  991,  990,  996,  991,  995,  989,  986,  991,  992,  987,  993,  988,  989,  994,  999,
    992,  993,  995,  998,  997,  994,  990,  996,  993,  995,  996,  997,  991,  1000, 996,  1001, 995,
    0,    998,  999,  992,  1032, 993,  998,  1006, 994,  999,  1004, 993,  995,  998,  997,

    0,    1000, 996,  1001, 1002, 1003, 1002, 1003, 1000, 1004, 1001, 0,    1006, 998,  999,  1004, 1032,
    1008, 998,  1006, 1007, 1005, 1004, 1010, 0,    1033, 1002, 1003, 1000, 1007, 1001, 1002, 1003, 1002,
    1003, 1005, 1004, 1008, 1009, 1006, 1007, 1005, 1004, 1010, 1008, 1009, 1015, 1007, 1005, 1038, 1010,
    1011, 1033, 1002, 1003, 1011, 1007, 1012, 1009, 1014, 1016, 1012, 1005, 1017, 1008, 1009, 1015, 1007,
    1005, 1013, 1010, 1013, 1009, 1015, 1014, 1011, 1038, 1018, 1011, 1014, 1016, 1012, 1011, 1017, 1012,
    1009, 1014, 1016, 1012, 0,    1017, 1013, 1019, 1015, 1039, 1042, 1013, 1018, 1013, 1043,

    1046, 1014, 1011, 1047, 1018, 1019, 1014, 1016, 1012, 1020, 1017, 1050, 1019, 1052, 1053, 1054, 1020,
    1055, 1013, 1019, 0,    1039, 1042, 0,    1018, 1059, 1043, 1046, 1060, 1020, 1047, 1061, 1019, 1062,
    1063, 0,    1020, 1064, 1050, 1019, 1052, 1053, 1054, 1020, 1055, 1059, 1065, 1067, 1060, 1068, 1069,
    1061, 1059, 1062, 1063, 1060, 1020, 1064, 1061, 1066, 1062, 1063, 1071, 1066, 1064, 1096, 1065, 1067,
    1072, 1068, 1069, 1073, 1059, 1065, 1067, 1060, 1068, 1069, 1061, 1074, 1062, 1063, 1071, 1066, 1064,
    1070, 1066, 1077, 1072, 1071, 1066, 1073, 1096, 1065, 1067, 1072, 1068, 1069, 1073, 1074,

    1070, 1075, 1078, 1075, 1076, 1070, 1074, 1077, 1098, 1071, 1066, 1076, 1070, 0,    1077, 1072, 1080,
    1081, 1073, 1082, 1079, 0,    1078, 1075, 1076, 1085, 1074, 1070, 1075, 1078, 1075, 1076, 1070, 1079,
    1077, 1098, 1080, 1081, 1076, 1082, 1079, 1083, 1084, 1080, 1081, 1085, 1082, 1079, 1084, 1078, 1075,
    1076, 1085, 1086, 1101, 0,    1083, 1088, 1089, 1087, 1079, 1083, 1084, 1080, 1081, 0,    1082, 1079,
    1083, 1084, 1104, 1089, 1085, 1086, 1087, 1084, 1091, 1088, 1089, 1087, 1086, 1101, 1090, 1083, 1088,
    1089, 1087, 1092, 1083, 1084, 1090, 1091, 1093, 1094, 1108, 1109, 1091, 1104, 1089, 1110,

    1086, 1087, 1090, 1091, 1088, 1089, 1087, 1092, 1114, 1090, 1115, 1113, 1093, 1094, 1092, 0,    1116,
    1090, 1091, 1093, 1094, 1108, 1109, 1091, 1113, 1115, 1110, 1117, 1114, 1090, 1115, 1113, 0,    1118,
    1092, 1114, 1116, 1115, 1113, 1093, 1094, 1119, 1120, 1116, 1122, 1123, 1121, 1117, 1118, 0,    1124,
    1113, 1115, 1118, 1117, 1114, 1125, 1115, 1113, 1121, 1118, 1119, 1120, 1116, 1122, 1123, 1121, 1126,
    1119, 1120, 1124, 1122, 1123, 1121, 1117, 1118, 1125, 1124, 1126, 1128, 1118, 1127, 1131, 1125, 1133,
    1127, 1121, 1126, 1119, 1120, 1136, 1122, 1123, 1121, 1126, 1138, 1139, 1124, 1140, 1128,

    0,    1127, 1142, 1125, 1143, 1126, 1128, 1141, 1127, 1131, 1149, 1133, 1127, 1146, 1126, 1151, 1139,
    1136, 1140, 1152, 1138, 1141, 1142, 1139, 1143, 1140, 1128, 1141, 1127, 1142, 0,    1143, 1144, 1153,
    1141, 1156, 1159, 1149, 1160, 1152, 1138, 1154, 1144, 1139, 1162, 1140, 1152, 1138, 1141, 1142, 1154,
    1143, 1144, 1153, 1141, 1146, 1164, 1151, 1160, 1144, 1153, 1154, 1156, 1159, 1166, 1160, 1152, 1138,
    1154, 1144, 1168, 1162, 1170, 1172, 1174, 1176, 1178, 1154, 1180, 1144, 1153, 0,    1146, 1164, 1151,
    1160, 0,    0,    1154, 0,    0,    1166, 0,    0,    0,    0,    0,    1168, 0,    1170,

    1172, 1174, 1176, 1178, 0,    1180, 1192, 1192, 1192, 1192, 1192, 1193, 0,    0,    1193, 1193, 1195,
    1195, 1195, 0,    1195, 1196, 0,    1196, 1196, 1196, 1197, 0,    1197, 1197, 1197, 1198, 0,    1198,
    1198, 1198, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

    1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include <stdio.h>
#include <climits>
#include <sstream>
#include "../sql/Expr.h"
#include "bison_parser.h"

#define TOKEN(name) \
  { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2133 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2147 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void*
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t {
  /* User-defined. Not touched by flex. */
  YY_EXTRA_TYPE yyextra_r;

  /* The rest are the same as the globals declared in the non-reentrant scanner. */
  FILE *yyin_r, *yyout_r;
  size_t yy_buffer_stack_top;       /**< index of top of stack. */
  size_t yy_buffer_stack_max;       /**< capacity of stack. */
  YY_BUFFER_STATE* yy_buffer_stack; /**< Stack as an array. */
  char yy_hold_char;
  int yy_n_chars;
  int yyleng_r;
  char* yy_c_buf_p;
  int yy_init;
  int yy_start;
  int yy_did_buffer_switch_on_eof;
  int yy_start_stack_ptr;
  int yy_start_stack_depth;
  int* yy_start_stack;
  yy_state_type yy_last_accepting_state;
  char* yy_last_accepting_cpos;

  int yylineno_r;
  int yy_flex_debug_r;

  char* yytext_r;
  int yy_more_flag;
  int yy_more_len;

  YYSTYPE* yylval_r;

  YYLTYPE* yylloc_r;

}; /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

/* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
#define yylval yyg->yylval_r

#define yylloc yyg->yylloc_r

int yylex_init(yyscan_t* scanner);

int yylex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy(yyscan_t yyscanner);

int yyget_debug(yyscan_t yyscanner);

void yyset_debug(int debug_flag, yyscan_t yyscanner);

YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner);

void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner);

FILE* yyget_in(yyscan_t yyscanner);

void yyset_in(FILE* _in_str, yyscan_t yyscanner);

FILE* yyget_out(yyscan_t yyscanner);

void yyset_out(FILE* _out_str, yyscan_t yyscanner);

int yyget_leng(yyscan_t yyscanner);

char* yyget_text(yyscan_t yyscanner);

int yyget_lineno(yyscan_t yyscanner);

void yyset_lineno(int _line_number, yyscan_t yyscanner);

int yyget_column(yyscan_t yyscanner);

void yyset_column(int _column_no, yyscan_t yyscanner);

YYSTYPE* yyget_lval(yyscan_t yyscanner);

void yyset_lval(YYSTYPE* yylval_param, yyscan_t yyscanner);

YYLTYPE* yyget_lloc(yyscan_t yyscanner);

void yyset_lloc(YYLTYPE* yylloc_param, yyscan_t yyscanner);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap(yyscan_t yyscanner);
#else
extern int yywrap(yyscan_t yyscanner);
#endif
#endif

#ifndef YY_NO_UNPUT

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char*, const char*, int, yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char*, yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO                                        \
  do {                                              \
    if (fwrite(yytext, (size_t)yyleng, 1, yyout)) { \
    }                                               \
  } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                                      \
  if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                                         \
    int c = '*';                                                                             \
    int n;                                                                                   \
    for (n = 0; n < max_size && (c = getc(yyin)) != EOF && c != '\n'; ++n) buf[n] = (char)c; \
    if (c == '\n') buf[n++] = (char)c;                                                       \
    if (c == EOF && ferror(yyin)) YY_FATAL_ERROR("input in flex scanner failed");            \
    result = n;                                                                              \
  } else {                                                                                   \
    errno = 0;                                                                               \
    while ((result = (int)fread(buf, 1, (yy_size_t)max_size, yyin)) == 0 && ferror(yyin)) {  \
      if (errno != EINTR) {                                                                  \
        YY_FATAL_ERROR("input in flex scanner failed");                                      \
        break;                                                                               \
      }                                                                                      \
      errno = 0;                                                                             \
      clearerr(yyin);                                                                        \
    }                                                                                        \
  }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg, yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex(YYSTYPE* yylval_param, YYLTYPE* yylloc_param, yyscan_t yyscanner);

#define YY_DECL int yylex(YYSTYPE* yylval_param, YYLTYPE* yylloc_param, yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/ break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
  yy_state_type yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  yylval = yylval_param;

  yylloc = yylloc_param;

  if (!yyg->yy_init) {
    yyg->yy_init = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!yyg->yy_start) yyg->yy_start = 1; /* first start state */

    if (!yyin) yyin = stdin;

    if (!yyout) yyout = stdout;

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack(yyscanner);
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
    }

    yy_load_buffer_state(yyscanner);
  }

  {
#line 57 "flex_lexer.l"

#line 2434 "flex_lexer.cpp"

    while (/*CONSTCOND*/ 1) /* loops until end-of-file is reached */
    {
      yy_cp = yyg->yy_c_buf_p;

      /* Support of yytext. */
      *yy_cp = yyg->yy_hold_char;

      /* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
      yy_bp = yy_cp;

      yy_current_state = yyg->yy_start;
    yy_match:
      do {
        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        if (yy_accept[yy_current_state]) {
          yyg->yy_last_accepting_state = yy_current_state;
          yyg->yy_last_accepting_cpos = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
          yy_current_state = (int)yy_def[yy_current_state];
          if (yy_current_state >= 1192) yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
        ++yy_cp;
      } while (yy_current_state != 1191);
      yy_cp = yyg->yy_last_accepting_cpos;
      yy_current_state = yyg->yy_last_accepting_state;

    yy_find_action:
      yy_act = yy_accept[yy_current_state];

      YY_DO_BEFORE_ACTION;

    do_action: /* This label is used only to access EOF actions. */

      switch (yy_act) { /* beginning of action switch */
        case 0:         /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = yyg->yy_hold_char;
          yy_cp = yyg->yy_last_accepting_cpos;
          yy_current_state = yyg->yy_last_accepting_state;
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP
#line 59 "flex_lexer.l"
          BEGIN(COMMENT);
          YY_BREAK
        case 2:
          YY_RULE_SETUP
#line 60 "flex_lexer.l"
              /* skipping comment content until a end of line is read */;
          YY_BREAK
        case 3:
          /* rule 3 can match eol */
          YY_RULE_SETUP
#line 61 "flex_lexer.l"
          BEGIN(INITIAL);
          YY_BREAK
        case 4:
          /* rule 4 can match eol */
          YY_RULE_SETUP
#line 63 "flex_lexer.l"
              /* skip whitespace */;
          YY_BREAK
        case 5:
          YY_RULE_SETUP
#line 65 "flex_lexer.l"
          TOKEN(DEALLOCATE)
          YY_BREAK
        case 6:
          YY_RULE_SETUP
#line 66 "flex_lexer.l"
          TOKEN(PARAMETERS)
          YY_BREAK
        case 7:
          YY_RULE_SETUP
#line 67 "flex_lexer.l"
          TOKEN(INTERSECT)
          YY_BREAK
        case 8:
          YY_RULE_SETUP
#line 68 "flex_lexer.l"
          TOKEN(TEMPORARY)
          YY_BREAK
        case 9:
          YY_RULE_SETUP
#line 69 "flex_lexer.l"
          TOKEN(TIMESTAMP)
          YY_BREAK
        case 10:
          YY_RULE_SETUP
#line 70 "flex_lexer.l"
          TOKEN(DESCRIBE)
          YY_BREAK
        case 11:
          YY_RULE_SETUP
#line 71 "flex_lexer.l"
          TOKEN(DISTINCT)
          YY_BREAK
        case 12:
          YY_RULE_SETUP
#line 72 "flex_lexer.l"
          TOKEN(NVARCHAR)
          YY_BREAK
        case 13:
          YY_RULE_SETUP
#line 73 "flex_lexer.l"
          TOKEN(RESTRICT)
          YY_BREAK
        case 14:
          YY_RULE_SETUP
#line 74 "flex_lexer.l"
          TOKEN(TRUNCATE)
          YY_BREAK
        case 15:
          YY_RULE_SETUP
#line 75 "flex_lexer.l"
          TOKEN(ANALYZE)
          YY_BREAK
        case 16:
          YY_RULE_SETUP
#line 76 "flex_lexer.l"
          TOKEN(BETWEEN)
          YY_BREAK
        case 17:
          YY_RULE_SETUP
#line 77 "flex_lexer.l"
          TOKEN(CASCADE)
          YY_BREAK
        case 18:
          YY_RULE_SETUP
#line 78 "flex_lexer.l"
          TOKEN(COLUMNS)
          YY_BREAK
        case 19:
          YY_RULE_SETUP
#line 79 "flex_lexer.l"
          TOKEN(CONTROL)
          YY_BREAK
        case 20:
          YY_RULE_SETUP
#line 80 "flex_lexer.l"
          TOKEN(DEFAULT)
          YY_BREAK
        case 21:
          YY_RULE_SETUP
#line 81 "flex_lexer.l"
          TOKEN(EXECUTE)
          YY_BREAK
        case 22:
          YY_RULE_SETUP
#line 82 "flex_lexer.l"
          TOKEN(EXPLAIN)
          YY_BREAK
        case 23:
          YY_RULE_SETUP
#line 83 "flex_lexer.l"
          TOKEN(INTEGER)
          YY_BREAK
        case 24:
          YY_RULE_SETUP
#line 84 "flex_lexer.l"
          TOKEN(NATURAL)
          YY_BREAK
        case 25:
          YY_RULE_SETUP
#line 85 "flex_lexer.l"
          TOKEN(PREPARE)
          YY_BREAK
        case 26:
          YY_RULE_SETUP
#line 86 "flex_lexer.l"
          TOKEN(PRIMARY)
          YY_BREAK
        case 27:
          YY_RULE_SETUP
#line 87 "flex_lexer.l"
          TOKEN(SCHEMAS)
          YY_BREAK
        case 28:
          YY_RULE_SETUP
#line 88 "flex_lexer.l"
          TOKEN(SPATIAL)
          YY_BREAK
        case 29:
          YY_RULE_SETUP
#line 89 "flex_lexer.l"
          TOKEN(VARCHAR)
          YY_BREAK
        case 30:
          YY_RULE_SETUP
#line 90 "flex_lexer.l"
          TOKEN(TIME)
          YY_BREAK
        case 31:
          YY_RULE_SETUP
#line 91 "flex_lexer.l"
          TOKEN(DECIMAL)
          YY_BREAK
        case 32:
          YY_RULE_SETUP
#line 92 "flex_lexer.l"
          TOKEN(REAL)
          YY_BREAK
        case 33:
          YY_RULE_SETUP
#line 93 "flex_lexer.l"
          TOKEN(SMALLINT)
          YY_BREAK
        case 34:
          YY_RULE_SETUP
#line 94 "flex_lexer.l"
          TOKEN(VIRTUAL)
          YY_BREAK
        case 35:
          YY_RULE_SETUP
#line 95 "flex_lexer.l"
          TOKEN(BEFORE)
          YY_BREAK
        case 36:
          YY_RULE_SETUP
#line 96 "flex_lexer.l"
          TOKEN(COLUMN)
          YY_BREAK
        case 37:
          YY_RULE_SETUP
#line 97 "flex_lexer.l"
          TOKEN(CREATE)
          YY_BREAK
        case 38:
          YY_RULE_SETUP
#line 98 "flex_lexer.l"
          TOKEN(DELETE)
          YY_BREAK
        case 39:
          YY_RULE_SETUP
#line 99 "flex_lexer.l"
          TOKEN(DIRECT)
          YY_BREAK
        case 40:
          YY_RULE_SETUP
#line 100 "flex_lexer.l"
          TOKEN(DOUBLE)
          YY_BREAK
        case 41:
          YY_RULE_SETUP
#line 101 "flex_lexer.l"
          TOKEN(ESCAPE)
          YY_BREAK
        case 42:
          YY_RULE_SETUP
#line 102 "flex_lexer.l"
          TOKEN(EXCEPT)
          YY_BREAK
        case 43:
          YY_RULE_SETUP
#line 103 "flex_lexer.l"
          TOKEN(EXISTS)
          YY_BREAK
        case 44:
          YY_RULE_SETUP
#line 104 "flex_lexer.l"
          TOKEN(EXTRACT)
          YY_BREAK
        case 45:
          YY_RULE_SETUP
#line 105 "flex_lexer.l"
          TOKEN(CAST)
          YY_BREAK
        case 46:
          YY_RULE_SETUP
#line 106 "flex_lexer.l"
          TOKEN(FORMAT)
          YY_BREAK
        case 47:
          YY_RULE_SETUP
#line 107 "flex_lexer.l"
          TOKEN(GLOBAL)
          YY_BREAK
        case 48:
          YY_RULE_SETUP
#line 108 "flex_lexer.l"
          TOKEN(HAVING)
          YY_BREAK
        case 49:
          YY_RULE_SETUP
#line 109 "flex_lexer.l"
          TOKEN(IMPORT)
          YY_BREAK
        case 50:
          YY_RULE_SETUP
#line 110 "flex_lexer.l"
          TOKEN(INSERT)
          YY_BREAK
        case 51:
          YY_RULE_SETUP
#line 111 "flex_lexer.l"
          TOKEN(ISNULL)
          YY_BREAK
        case 52:
          YY_RULE_SETUP
#line 112 "flex_lexer.l"
          TOKEN(OFFSET)
          YY_BREAK
        case 53:
          YY_RULE_SETUP
#line 113 "flex_lexer.l"
          TOKEN(RENAME)
          YY_BREAK
        case 54:
          YY_RULE_SETUP
#line 114 "flex_lexer.l"
          TOKEN(SCHEMA)
          YY_BREAK
        case 55:
          YY_RULE_SETUP
#line 115 "flex_lexer.l"
          TOKEN(SELECT)
          YY_BREAK
        case 56:
          YY_RULE_SETUP
#line 116 "flex_lexer.l"
          TOKEN(SORTED)
          YY_BREAK
        case 57:
          YY_RULE_SETUP
#line 117 "flex_lexer.l"
          TOKEN(TABLES)
          YY_BREAK
        case 58:
          YY_RULE_SETUP
#line 118 "flex_lexer.l"
          TOKEN(UNIQUE)
          YY_BREAK
        case 59:
          YY_RULE_SETUP
#line 119 "flex_lexer.l"
          TOKEN(UNLOAD)
          YY_BREAK
        case 60:
          YY_RULE_SETUP
#line 120 "flex_lexer.l"
          TOKEN(UPDATE)
          YY_BREAK
        case 61:
          YY_RULE_SETUP
#line 121 "flex_lexer.l"
          TOKEN(VALUES)
          YY_BREAK
        case 62:
          YY_RULE_SETUP
#line 122 "flex_lexer.l"
          TOKEN(AFTER)
          YY_BREAK
        case 63:
          YY_RULE_SETUP
#line 123 "flex_lexer.l"
          TOKEN(ALTER)
          YY_BREAK
        case 64:
          YY_RULE_SETUP
#line 124 "flex_lexer.l"
          TOKEN(ARRAY)
          YY_BREAK
        case 65:
          YY_RULE_SETUP
#line 125 "flex_lexer.l"
          TOKEN(CROSS)
          YY_BREAK
        case 66:
          YY_RULE_SETUP
#line 126 "flex_lexer.l"
          TOKEN(DELTA)
          YY_BREAK
        case 67:
          YY_RULE_SETUP
#line 127 "flex_lexer.l"
          TOKEN(FLOAT)
          YY_BREAK
        case 68:
          YY_RULE_SETUP
#line 128 "flex_lexer.l"
          TOKEN(GROUP)
          YY_BREAK
        case 69:
          YY_RULE_SETUP
#line 129 "flex_lexer.l"
          TOKEN(INDEX)
          YY_BREAK
        case 70:
          YY_RULE_SETUP
#line 130 "flex_lexer.l"
          TOKEN(INNER)
          YY_BREAK
        case 71:
          YY_RULE_SETUP
#line 131 "flex_lexer.l"
          TOKEN(LIMIT)
          YY_BREAK
        case 72:
          YY_RULE_SETUP
#line 132 "flex_lexer.l"
          TOKEN(LOCAL)
          YY_BREAK
        case 73:
          YY_RULE_SETUP
#line 133 "flex_lexer.l"
          TOKEN(MERGE)
          YY_BREAK
        case 74:
          YY_RULE_SETUP
#line 134 "flex_lexer.l"
          TOKEN(MINUS)
          YY_BREAK
        case 75:
          YY_RULE_SETUP
#line 135 "flex_lexer.l"
          TOKEN(ORDER)
          YY_BREAK
        case 76:
          YY_RULE_SETUP
#line 136 "flex_lexer.l"
          TOKEN(OUTER)
          YY_BREAK
        case 77:
          YY_RULE_SETUP
#line 137 "flex_lexer.l"
          TOKEN(RIGHT)
          YY_BREAK
        case 78:
          YY_RULE_SETUP
#line 138 "flex_lexer.l"
          TOKEN(TABLE)
          YY_BREAK
        case 79:
          YY_RULE_SETUP
#line 139 "flex_lexer.l"
          TOKEN(UNION)
          YY_BREAK
        case 80:
          YY_RULE_SETUP
#line 140 "flex_lexer.l"
          TOKEN(USING)
          YY_BREAK
        case 81:
          YY_RULE_SETUP
#line 141 "flex_lexer.l"
          TOKEN(WHERE)
          YY_BREAK
        case 82:
          YY_RULE_SETUP
#line 142 "flex_lexer.l"
          TOKEN(CALL)
          YY_BREAK
        case 83:
          YY_RULE_SETUP
#line 143 "flex_lexer.l"
          TOKEN(CASE)
          YY_BREAK
        case 84:
          YY_RULE_SETUP
#line 144 "flex_lexer.l"
          TOKEN(CHAR)
          YY_BREAK
        case 85:
          YY_RULE_SETUP
#line 145 "flex_lexer.l"
          TOKEN(COPY)
          YY_BREAK
        case 86:
          YY_RULE_SETUP
#line 146 "flex_lexer.l"
          TOKEN(DATE)
          YY_BREAK
        case 87:
          YY_RULE_SETUP
#line 147 "flex_lexer.l"
          TOKEN(DATETIME)
          YY_BREAK
        case 88:
          YY_RULE_SETUP
#line 148 "flex_lexer.l"
          TOKEN(DESC)
          YY_BREAK
        case 89:
          YY_RULE_SETUP
#line 149 "flex_lexer.l"
          TOKEN(DROP)
          YY_BREAK
        case 90:
          YY_RULE_SETUP
#line 150 "flex_lexer.l"
          TOKEN(ELSE)
          YY_BREAK
        case 91:
          YY_RULE_SETUP
#line 151 "flex_lexer.l"
          TOKEN(FILE)
          YY_BREAK
        case 92:
          YY_RULE_SETUP
#line 152 "flex_lexer.l"
          TOKEN(FROM)
          YY_BREAK
        case 93:
          YY_RULE_SETUP
#line 153 "flex_lexer.l"
          TOKEN(FULL)
          YY_BREAK
        case 94:
          YY_RULE_SETUP
#line 154 "flex_lexer.l"
          TOKEN(HASH)
          YY_BREAK
        case 95:
          YY_RULE_SETUP
#line 155 "flex_lexer.l"
          TOKEN(HINT)
          YY_BREAK
        case 96:
          YY_RULE_SETUP
#line 156 "flex_lexer.l"
          TOKEN(INTO)
          YY_BREAK
        case 97:
          YY_RULE_SETUP
#line 157 "flex_lexer.l"
          TOKEN(JOIN)
          YY_BREAK
        case 98:
          YY_RULE_SETUP
#line 158 "flex_lexer.l"
          TOKEN(LEFT)
          YY_BREAK
        case 99:
          YY_RULE_SETUP
#line 159 "flex_lexer.l"
          TOKEN(LIKE)
          YY_BREAK
        case 100:
          YY_RULE_SETUP
#line 160 "flex_lexer.l"
          TOKEN(ILIKE)
          YY_BREAK
        case 101:
          YY_RULE_SETUP
#line 161 "flex_lexer.l"
          TOKEN(LOAD)
          YY_BREAK
        case 102:
          YY_RULE_SETUP
#line 162 "flex_lexer.l"
          TOKEN(LONG)
          YY_BREAK
        case 103:
          YY_RULE_SETUP
#line 163 "flex_lexer.l"
          TOKEN(NULL)
          YY_BREAK
        case 104:
          YY_RULE_SETUP
#line 164 "flex_lexer.l"
          TOKEN(PLAN)
          YY_BREAK
        case 105:
          YY_RULE_SETUP
#line 165 "flex_lexer.l"
          TOKEN(SHOW)
          YY_BREAK
        case 106:
          YY_RULE_SETUP
#line 166 "flex_lexer.l"
          TOKEN(TEXT)
          YY_BREAK
        case 107:
          YY_RULE_SETUP
#line 167 "flex_lexer.l"
          TOKEN(THEN)
          YY_BREAK
        case 108:
          YY_RULE_SETUP
#line 168 "flex_lexer.l"
          TOKEN(VIEW)
          YY_BREAK
        case 109:
          YY_RULE_SETUP
#line 169 "flex_lexer.l"
          TOKEN(WHEN)
          YY_BREAK
        case 110:
          YY_RULE_SETUP
#line 170 "flex_lexer.l"
          TOKEN(WITH)
          YY_BREAK
        case 111:
          YY_RULE_SETUP
#line 171 "flex_lexer.l"
          TOKEN(ADD)
          YY_BREAK
        case 112:
          YY_RULE_SETUP
#line 172 "flex_lexer.l"
          TOKEN(ALL)
          YY_BREAK
        case 113:
          YY_RULE_SETUP
#line 173 "flex_lexer.l"
          TOKEN(AND)
          YY_BREAK
        case 114:
          YY_RULE_SETUP
#line 174 "flex_lexer.l"
          TOKEN(ASC)
          YY_BREAK
        case 115:
          YY_RULE_SETUP
#line 175 "flex_lexer.l"
          TOKEN(END)
          YY_BREAK
        case 116:
          YY_RULE_SETUP
#line 176 "flex_lexer.l"
          TOKEN(FOR)
          YY_BREAK
        case 117:
          YY_RULE_SETUP
#line 177 "flex_lexer.l"
          TOKEN(INT)
          YY_BREAK
        case 118:
          YY_RULE_SETUP
#line 178 "flex_lexer.l"
          TOKEN(KEY)
          YY_BREAK
        case 119:
          YY_RULE_SETUP
#line 179 "flex_lexer.l"
          TOKEN(NOT)
          YY_BREAK
        case 120:
          YY_RULE_SETUP
#line 180 "flex_lexer.l"
          TOKEN(OFF)
          YY_BREAK
        case 121:
          YY_RULE_SETUP
#line 181 "flex_lexer.l"
          TOKEN(SET)
          YY_BREAK
        case 122:
          YY_RULE_SETUP
#line 182 "flex_lexer.l"
          TOKEN(TOP)
          YY_BREAK
        case 123:
          YY_RULE_SETUP
#line 183 "flex_lexer.l"
          TOKEN(AS)
          YY_BREAK
        case 124:
          YY_RULE_SETUP
#line 184 "flex_lexer.l"
          TOKEN(BY)
          YY_BREAK
        case 125:
          YY_RULE_SETUP
#line 185 "flex_lexer.l"
          TOKEN(IF)
          YY_BREAK
        case 126:
          YY_RULE_SETUP
#line 186 "flex_lexer.l"
          TOKEN(IN)
          YY_BREAK
        case 127:
          YY_RULE_SETUP
#line 187 "flex_lexer.l"
          TOKEN(IS)
          YY_BREAK
        case 128:
          YY_RULE_SETUP
#line 188 "flex_lexer.l"
          TOKEN(OF)
          YY_BREAK
        case 129:
          YY_RULE_SETUP
#line 189 "flex_lexer.l"
          TOKEN(ON)
          YY_BREAK
        case 130:
          YY_RULE_SETUP
#line 190 "flex_lexer.l"
          TOKEN(OR)
          YY_BREAK
        case 131:
          YY_RULE_SETUP
#line 191 "flex_lexer.l"
          TOKEN(TO)
          YY_BREAK
        case 132:
          YY_RULE_SETUP
#line 192 "flex_lexer.l"
          TOKEN(SECOND)
          YY_BREAK
        case 133:
          YY_RULE_SETUP
#line 193 "flex_lexer.l"
          TOKEN(MINUTE)
          YY_BREAK
        case 134:
          YY_RULE_SETUP
#line 194 "flex_lexer.l"
          TOKEN(HOUR)
          YY_BREAK
        case 135:
          YY_RULE_SETUP
#line 195 "flex_lexer.l"
          TOKEN(DAY)
          YY_BREAK
        case 136:
          YY_RULE_SETUP
#line 196 "flex_lexer.l"
          TOKEN(MONTH)
          YY_BREAK
        case 137:
          YY_RULE_SETUP
#line 197 "flex_lexer.l"
          TOKEN(YEAR)
          YY_BREAK
        case 138:
          YY_RULE_SETUP
#line 198 "flex_lexer.l"
          TOKEN(SECONDS)
          YY_BREAK
        case 139:
          YY_RULE_SETUP
#line 199 "flex_lexer.l"
          TOKEN(MINUTES)
          YY_BREAK
        case 140:
          YY_RULE_SETUP
#line 200 "flex_lexer.l"
          TOKEN(HOURS)
          YY_BREAK
        case 141:
          YY_RULE_SETUP
#line 201 "flex_lexer.l"
          TOKEN(DAYS)
          YY_BREAK
        case 142:
          YY_RULE_SETUP
#line 202 "flex_lexer.l"
          TOKEN(MONTHS)
          YY_BREAK
        case 143:
          YY_RULE_SETUP
#line 203 "flex_lexer.l"
          TOKEN(YEARS)
          YY_BREAK
        case 144:
          YY_RULE_SETUP
#line 204 "flex_lexer.l"
          TOKEN(TRUE)
          YY_BREAK
        case 145:
          YY_RULE_SETUP
#line 205 "flex_lexer.l"
          TOKEN(FALSE)
          YY_BREAK
        case 146:
          YY_RULE_SETUP
#line 206 "flex_lexer.l"
          TOKEN(TRANSACTION)
          YY_BREAK
        case 147:
          YY_RULE_SETUP
#line 207 "flex_lexer.l"
          TOKEN(BEGIN)
          YY_BREAK
        case 148:
          YY_RULE_SETUP
#line 208 "flex_lexer.l"
          TOKEN(ROLLBACK)
          YY_BREAK
        case 149:
          YY_RULE_SETUP
#line 209 "flex_lexer.l"
          TOKEN(COMMIT)
          YY_BREAK
        case 150:
          YY_RULE_SETUP
#line 210 "flex_lexer.l"
          TOKEN(INTERVAL)
          YY_BREAK
        case 151:
          YY_RULE_SETUP
#line 212 "flex_lexer.l"
          TOKEN(CHARACTER_VARYING)
          YY_BREAK
        /* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
        case 152:
          YY_RULE_SETUP
#line 215 "flex_lexer.l"
          TOKEN(EQUALS)
          YY_BREAK
        case 153:
          YY_RULE_SETUP
#line 216 "flex_lexer.l"
          TOKEN(NOTEQUALS)
          YY_BREAK
        case 154:
          YY_RULE_SETUP
#line 217 "flex_lexer.l"
          TOKEN(NOTEQUALS)
          YY_BREAK
        case 155:
          YY_RULE_SETUP
#line 218 "flex_lexer.l"
          TOKEN(LESSEQ)
          YY_BREAK
        case 156:
          YY_RULE_SETUP
#line 219 "flex_lexer.l"
          TOKEN(GREATEREQ)
          YY_BREAK
        case 157:
          YY_RULE_SETUP
#line 220 "flex_lexer.l"
          TOKEN(CONCAT)
          YY_BREAK
        case 158:
          YY_RULE_SETUP
#line 222 "flex_lexer.l"
          {
            return yytext[0];
          }
          YY_BREAK
        case 159:
#line 225 "flex_lexer.l"
        case 160:
          YY_RULE_SETUP
#line 225 "flex_lexer.l"
          {
            yylval->fval = atof(yytext);
            return SQL_FLOATVAL;
          }
          YY_BREAK
        /*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
        case 161:
          YY_RULE_SETUP
#line 235 "flex_lexer.l"
          {
            yylval->ival = LLONG_MIN;
            return SQL_INTVAL;
          }
          YY_BREAK
        case 162:
          YY_RULE_SETUP
#line 240 "flex_lexer.l"
          {
            errno = 0;
            yylval->ival = strtoll(yytext, nullptr, 0);
            if (errno) {
              return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
              return 0;
            }
            return SQL_INTVAL;
          }
          YY_BREAK
        case 163:
          YY_RULE_SETUP
#line 250 "flex_lexer.l"
          {
            // Crop the leading and trailing quote char
            yylval->sval = hsql::substr(yytext, 1, strlen(yytext) - 1);
            return SQL_IDENTIFIER;
          }
          YY_BREAK
        case 164:
          YY_RULE_SETUP
#line 256 "flex_lexer.l"
          {
            yylval->sval = strdup(yytext);
            return SQL_IDENTIFIER;
          }
          YY_BREAK
        case 165:
          YY_RULE_SETUP
#line 261 "flex_lexer.l"
          {
            BEGIN singlequotedstring;
            strbuf.clear();
            strbuf.str("");
          }  // Clear strbuf manually, see #170
          YY_BREAK
        case 166:
          YY_RULE_SETUP
#line 262 "flex_lexer.l"
          {
            strbuf << '\'';
          }
          YY_BREAK
        case 167:
          /* rule 167 can match eol */
          YY_RULE_SETUP
#line 263 "flex_lexer.l"
          {
            strbuf << yytext;
          }
          YY_BREAK
        case 168:
          YY_RULE_SETUP
#line 264 "flex_lexer.l"
          {
            BEGIN 0;
            yylval->sval = strdup(strbuf.str().c_str());
            return SQL_STRING;
          }
          YY_BREAK
        case YY_STATE_EOF(singlequotedstring):
#line 265 "flex_lexer.l"
        {
          fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
          return 0;
        }
          YY_BREAK
        case 169:
          YY_RULE_SETUP
#line 267 "flex_lexer.l"
          {
            fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
            return 0;
          }
          YY_BREAK
        case 170:
          YY_RULE_SETUP
#line 269 "flex_lexer.l"
          ECHO;
          YY_BREAK
#line 3368 "flex_lexer.cpp"
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(COMMENT):
          yyterminate();

        case YY_END_OF_BUFFER: {
          /* Amount of text matched not including the EOB char. */
          int yy_amount_of_matched_text = (int)(yy_cp - yyg->yytext_ptr) - 1;

          /* Undo the effects of YY_DO_BEFORE_ACTION. */
          *yy_cp = yyg->yy_hold_char;
          YY_RESTORE_YY_MORE_OFFSET

          if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
            /* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
            yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
            YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
          }

          /* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
          if (yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars]) { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state(yyscanner);

            /* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

            yy_next_state = yy_try_NUL_trans(yy_current_state, yyscanner);

            yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

            if (yy_next_state) {
              /* Consume the NUL. */
              yy_cp = ++yyg->yy_c_buf_p;
              yy_current_state = yy_next_state;
              goto yy_match;
            }

            else {
              yy_cp = yyg->yy_last_accepting_cpos;
              yy_current_state = yyg->yy_last_accepting_state;
              goto yy_find_action;
            }
          }

          else
            switch (yy_get_next_buffer(yyscanner)) {
              case EOB_ACT_END_OF_FILE: {
                yyg->yy_did_buffer_switch_on_eof = 0;

                if (yywrap(yyscanner)) {
                  /* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
                  yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

                  yy_act = YY_STATE_EOF(YY_START);
                  goto do_action;
                }

                else {
                  if (!yyg->yy_did_buffer_switch_on_eof) YY_NEW_FILE;
                }
                break;
              }

              case EOB_ACT_CONTINUE_SCAN:
                yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(yyscanner);

                yy_cp = yyg->yy_c_buf_p;
                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

              case EOB_ACT_LAST_MATCH:
                yyg->yy_c_buf_p = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

                yy_current_state = yy_get_previous_state(yyscanner);

                yy_cp = yyg->yy_c_buf_p;
                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
          break;
        }

        default:
          YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
      } /* end of action switch */
    }   /* end of scanning one token */
  }     /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  char* dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char* source = yyg->yytext_ptr;
  int number_to_move, i;
  int ret_val;

  if (yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is an EOF. */
    if (yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
			 * process it.
			 */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

  for (i = 0; i < number_to_move; ++i) *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

  else {
    int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

      int yy_c_buf_p_offset = (int)(yyg->yy_c_buf_p - b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        int new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char*)
            /* Include room in for 2 EOB chars. */
            yyrealloc((void*)b->yy_ch_buf, (yy_size_t)(b->yy_buf_size + 2), yyscanner);
      } else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = NULL;

      if (!b->yy_ch_buf) YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE) num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), yyg->yy_n_chars, num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  if (yyg->yy_n_chars == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin, yyscanner);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
        (char*)yyrealloc((void*)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t)new_size, yyscanner);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
    /* "- 2" to take care of EOB's */
    YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int)(new_size - 2);
  }

  yyg->yy_n_chars += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(yyscan_t yyscanner) {
  yy_state_type yy_current_state;
  char* yy_cp;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  yy_current_state = yyg->yy_start;

  for (yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp) {
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      yyg->yy_last_accepting_state = yy_current_state;
      yyg->yy_last_accepting_cpos = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 1192) yy_c = yy_meta[yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state, yyscan_t yyscanner) {
  int yy_is_jam;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
  char* yy_cp = yyg->yy_c_buf_p;

  YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    yyg->yy_last_accepting_state = yy_current_state;
    yyg->yy_last_accepting_cpos = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 1192) yy_c = yy_meta[yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
  yy_is_jam = (yy_current_state == 1191);

  (void)yyg;
  return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner)
#else
static int input(yyscan_t yyscanner)
#endif

{
  int c;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  *yyg->yy_c_buf_p = yyg->yy_hold_char;

  if (*yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
    if (yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars]) /* This was really a NUL. */
      *yyg->yy_c_buf_p = '\0';

    else { /* need more input */
      int offset = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr);
      ++yyg->yy_c_buf_p;

      switch (yy_get_next_buffer(yyscanner)) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

          /* Reset buffer status. */
          yyrestart(yyin, yyscanner);

          /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE: {
          if (yywrap(yyscanner)) return 0;

          if (!yyg->yy_did_buffer_switch_on_eof) YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput(yyscanner);
#else
          return input(yyscanner);
#endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
          break;
      }
    }
  }

  c = *(unsigned char*)yyg->yy_c_buf_p; /* cast for 8-bit char's */
  *yyg->yy_c_buf_p = '\0';              /* preserve yytext */
  yyg->yy_hold_char = *++yyg->yy_c_buf_p;

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart(FILE* input_file, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack(yyscanner);
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file, yyscanner);
  yy_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
  yyensure_buffer_stack(yyscanner);
  if (YY_CURRENT_BUFFER == new_buffer) return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state(yyscanner);

  /* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
  yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state), yyscanner);
  if (!b) YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
  b->yy_ch_buf = (char*)yyalloc((yy_size_t)(b->yy_buf_size + 2), yyscanner);
  if (!b->yy_ch_buf) YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file, yyscanner);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!b) return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer) yyfree((void*)b->yy_ch_buf, yyscanner);

  yyfree((void*)b, yyscanner);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file, yyscan_t yyscanner)

{
  int oerrno = errno;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  yy_flush_buffer(b, yyscanner);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  if (!b) return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER) yy_load_buffer_state(yyscanner);
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  if (new_buffer == NULL) return;

  yyensure_buffer_stack(yyscanner);

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER) yyg->yy_buffer_stack_top++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state(yyscanner);
  yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  if (!YY_CURRENT_BUFFER) return;

  yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if (yyg->yy_buffer_stack_top > 0) --yyg->yy_buffer_stack_top;

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state(yyscanner);
    yyg->yy_did_buffer_switch_on_eof = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack(yyscan_t yyscanner) {
  yy_size_t num_to_alloc;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!yyg->yy_buffer_stack) {
    /* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
    num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
    yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc(num_to_alloc * sizeof(struct yy_buffer_state*), yyscanner);
    if (!yyg->yy_buffer_stack) YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    yyg->yy_buffer_stack_max = num_to_alloc;
    yyg->yy_buffer_stack_top = 0;
    return;
  }

  if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1) {
    /* Increase the buffer to prepare for a possible push. */
    yy_size_t grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc(
        yyg->yy_buffer_stack, num_to_alloc * sizeof(struct yy_buffer_state*), yyscanner);
    if (!yyg->yy_buffer_stack) YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
    yyg->yy_buffer_stack_max = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR || base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return NULL;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state), yyscanner);
  if (!b) YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

  b->yy_buf_size = (int)(size - 2); /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = NULL;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer(b, yyscanner);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(const char* yystr, yyscan_t yyscanner) {
  return yy_scan_bytes(yystr, (int)strlen(yystr), yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(const char* yybytes, int _yybytes_len, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;
  char* buf;
  yy_size_t n;
  int i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = (yy_size_t)(_yybytes_len + 2);
  buf = (char*)yyalloc(n, yyscanner);
  if (!buf) YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i) buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer(buf, n, yyscanner);
  if (!b) YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
  b->yy_is_our_buffer = 1;

  return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error(const char* msg, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;
  fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                \
  do {                                           \
    /* Undo effects of setting up yytext. */     \
    int yyless_macro_arg = (n);                  \
    YY_LESS_LINENO(yyless_macro_arg);            \
    yytext[yyleng] = yyg->yy_hold_char;          \
    yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
    yyg->yy_hold_char = *yyg->yy_c_buf_p;        \
    *yyg->yy_c_buf_p = '\0';                     \
    yyleng = yyless_macro_arg;                   \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!YY_CURRENT_BUFFER) return 0;

  return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!YY_CURRENT_BUFFER) return 0;

  return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE* yyget_in(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE* yyget_out(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char* yyget_text(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyextra = user_defined;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno(int _line_number, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* lineno is only valid if an input buffer exists. */
  if (!YY_CURRENT_BUFFER) YY_FATAL_ERROR("yyset_lineno called with no buffer");

  yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column(int _column_no, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* column is only valid if an input buffer exists. */
  if (!YY_CURRENT_BUFFER) YY_FATAL_ERROR("yyset_column called with no buffer");

  yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE* _in_str, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyin = _in_str;
}

void yyset_out(FILE* _out_str, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyout = _out_str;
}

int yyget_debug(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yy_flex_debug;
}

void yyset_debug(int _bdebug, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yy_flex_debug = _bdebug;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE* yyget_lval(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yylval;
}

void yyset_lval(YYSTYPE* yylval_param, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yylval = yylval_param;
}

YYLTYPE* yyget_lloc(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yylloc;
}

void yyset_lloc(YYLTYPE* yylloc_param, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yylloc = yylloc_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals) {
  if (ptr_yy_globals == NULL) {
    errno = EINVAL;
    return 1;
  }

  *ptr_yy_globals = (yyscan_t)yyalloc(sizeof(struct yyguts_t), NULL);

  if (*ptr_yy_globals == NULL) {
    errno = ENOMEM;
    return 1;
  }

  /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
  memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

  return yy_init_globals(*ptr_yy_globals);
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals) {
  struct yyguts_t dummy_yyguts;

  yyset_extra(yy_user_defined, &dummy_yyguts);

  if (ptr_yy_globals == NULL) {
    errno = EINVAL;
    return 1;
  }

  *ptr_yy_globals = (yyscan_t)yyalloc(sizeof(struct yyguts_t), &dummy_yyguts);

  if (*ptr_yy_globals == NULL) {
    errno = ENOMEM;
    return 1;
  }

  /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
  memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

  yyset_extra(yy_user_defined, *ptr_yy_globals);

  return yy_init_globals(*ptr_yy_globals);
}

static int yy_init_globals(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

  yyg->yy_buffer_stack = NULL;
  yyg->yy_buffer_stack_top = 0;
  yyg->yy_buffer_stack_max = 0;
  yyg->yy_c_buf_p = NULL;
  yyg->yy_init = 0;
  yyg->yy_start = 0;

  yyg->yy_start_stack_ptr = 0;
  yyg->yy_start_stack_depth = 0;
  yyg->yy_start_stack = NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
  yyin = stdin;
  yyout = stdout;
#else
  yyin = NULL;
  yyout = NULL;
#endif

  /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
  return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER) {
    yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state(yyscanner);
  }

  /* Destroy the stack itself. */
  yyfree(yyg->yy_buffer_stack, yyscanner);
  yyg->yy_buffer_stack = NULL;

  /* Destroy the start condition stack. */
  yyfree(yyg->yy_start_stack, yyscanner);
  yyg->yy_start_stack = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
  yy_init_globals(yyscanner);

  /* Destroy the main struct (reentrant only). */
  yyfree(yyscanner, yyscanner);
  yyscanner = NULL;
  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, const char* s2, int n, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;

  int i;
  for (i = 0; i < n; ++i) s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char* s, yyscan_t yyscanner) {
  int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void* yyalloc(yy_size_t size, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;
  return malloc(size);
}

void* yyrealloc(void* ptr, yy_size_t size, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;

  /* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
  return realloc(ptr, size);
}

void yyfree(void* ptr, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  (void)yyg;
  free((char*)ptr); /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 269 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char* msg) {
  fprintf(stderr, "[SQL-Lexer-Error] %s\n", msg);
  return 0;
}
